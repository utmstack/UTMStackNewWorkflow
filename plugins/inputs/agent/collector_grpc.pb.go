// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: collector.proto

package agent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectorServiceClient is the client API for CollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectorServiceClient interface {
	RegisterCollector(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	DeleteCollector(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	ListCollector(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCollectorResponse, error)
	CollectorStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectorStreamClient, error)
	GetCollectorConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*CollectorConfig, error)
}

type collectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectorServiceClient(cc grpc.ClientConnInterface) CollectorServiceClient {
	return &collectorServiceClient{cc}
}

func (c *collectorServiceClient) RegisterCollector(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/agent.CollectorService/RegisterCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) DeleteCollector(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/agent.CollectorService/DeleteCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) ListCollector(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCollectorResponse, error) {
	out := new(ListCollectorResponse)
	err := c.cc.Invoke(ctx, "/agent.CollectorService/ListCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectorServiceClient) CollectorStream(ctx context.Context, opts ...grpc.CallOption) (CollectorService_CollectorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CollectorService_ServiceDesc.Streams[0], "/agent.CollectorService/CollectorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &collectorServiceCollectorStreamClient{stream}
	return x, nil
}

type CollectorService_CollectorStreamClient interface {
	Send(*CollectorMessages) error
	Recv() (*CollectorMessages, error)
	grpc.ClientStream
}

type collectorServiceCollectorStreamClient struct {
	grpc.ClientStream
}

func (x *collectorServiceCollectorStreamClient) Send(m *CollectorMessages) error {
	return x.ClientStream.SendMsg(m)
}

func (x *collectorServiceCollectorStreamClient) Recv() (*CollectorMessages, error) {
	m := new(CollectorMessages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *collectorServiceClient) GetCollectorConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*CollectorConfig, error) {
	out := new(CollectorConfig)
	err := c.cc.Invoke(ctx, "/agent.CollectorService/GetCollectorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectorServiceServer is the server API for CollectorService service.
// All implementations must embed UnimplementedCollectorServiceServer
// for forward compatibility
type CollectorServiceServer interface {
	RegisterCollector(context.Context, *RegisterRequest) (*AuthResponse, error)
	DeleteCollector(context.Context, *DeleteRequest) (*AuthResponse, error)
	ListCollector(context.Context, *ListRequest) (*ListCollectorResponse, error)
	CollectorStream(CollectorService_CollectorStreamServer) error
	GetCollectorConfig(context.Context, *ConfigRequest) (*CollectorConfig, error)
	mustEmbedUnimplementedCollectorServiceServer()
}

// UnimplementedCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectorServiceServer struct {
}

func (UnimplementedCollectorServiceServer) RegisterCollector(context.Context, *RegisterRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCollector not implemented")
}
func (UnimplementedCollectorServiceServer) DeleteCollector(context.Context, *DeleteRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCollector not implemented")
}
func (UnimplementedCollectorServiceServer) ListCollector(context.Context, *ListRequest) (*ListCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCollector not implemented")
}
func (UnimplementedCollectorServiceServer) CollectorStream(CollectorService_CollectorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectorStream not implemented")
}
func (UnimplementedCollectorServiceServer) GetCollectorConfig(context.Context, *ConfigRequest) (*CollectorConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectorConfig not implemented")
}
func (UnimplementedCollectorServiceServer) mustEmbedUnimplementedCollectorServiceServer() {}

// UnsafeCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectorServiceServer will
// result in compilation errors.
type UnsafeCollectorServiceServer interface {
	mustEmbedUnimplementedCollectorServiceServer()
}

func RegisterCollectorServiceServer(s grpc.ServiceRegistrar, srv CollectorServiceServer) {
	s.RegisterService(&CollectorService_ServiceDesc, srv)
}

func _CollectorService_RegisterCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).RegisterCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.CollectorService/RegisterCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).RegisterCollector(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_DeleteCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).DeleteCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.CollectorService/DeleteCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).DeleteCollector(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_ListCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).ListCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.CollectorService/ListCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).ListCollector(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectorService_CollectorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollectorServiceServer).CollectorStream(&collectorServiceCollectorStreamServer{stream})
}

type CollectorService_CollectorStreamServer interface {
	Send(*CollectorMessages) error
	Recv() (*CollectorMessages, error)
	grpc.ServerStream
}

type collectorServiceCollectorStreamServer struct {
	grpc.ServerStream
}

func (x *collectorServiceCollectorStreamServer) Send(m *CollectorMessages) error {
	return x.ServerStream.SendMsg(m)
}

func (x *collectorServiceCollectorStreamServer) Recv() (*CollectorMessages, error) {
	m := new(CollectorMessages)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CollectorService_GetCollectorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectorServiceServer).GetCollectorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.CollectorService/GetCollectorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectorServiceServer).GetCollectorConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectorService_ServiceDesc is the grpc.ServiceDesc for CollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.CollectorService",
	HandlerType: (*CollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCollector",
			Handler:    _CollectorService_RegisterCollector_Handler,
		},
		{
			MethodName: "DeleteCollector",
			Handler:    _CollectorService_DeleteCollector_Handler,
		},
		{
			MethodName: "ListCollector",
			Handler:    _CollectorService_ListCollector_Handler,
		},
		{
			MethodName: "GetCollectorConfig",
			Handler:    _CollectorService_GetCollectorConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectorStream",
			Handler:       _CollectorService_CollectorStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "collector.proto",
}

// PanelCollectorServiceClient is the client API for PanelCollectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PanelCollectorServiceClient interface {
	RegisterCollectorConfig(ctx context.Context, in *CollectorConfig, opts ...grpc.CallOption) (*ConfigKnowledge, error)
}

type panelCollectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPanelCollectorServiceClient(cc grpc.ClientConnInterface) PanelCollectorServiceClient {
	return &panelCollectorServiceClient{cc}
}

func (c *panelCollectorServiceClient) RegisterCollectorConfig(ctx context.Context, in *CollectorConfig, opts ...grpc.CallOption) (*ConfigKnowledge, error) {
	out := new(ConfigKnowledge)
	err := c.cc.Invoke(ctx, "/agent.PanelCollectorService/RegisterCollectorConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PanelCollectorServiceServer is the server API for PanelCollectorService service.
// All implementations must embed UnimplementedPanelCollectorServiceServer
// for forward compatibility
type PanelCollectorServiceServer interface {
	RegisterCollectorConfig(context.Context, *CollectorConfig) (*ConfigKnowledge, error)
	mustEmbedUnimplementedPanelCollectorServiceServer()
}

// UnimplementedPanelCollectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPanelCollectorServiceServer struct {
}

func (UnimplementedPanelCollectorServiceServer) RegisterCollectorConfig(context.Context, *CollectorConfig) (*ConfigKnowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCollectorConfig not implemented")
}
func (UnimplementedPanelCollectorServiceServer) mustEmbedUnimplementedPanelCollectorServiceServer() {}

// UnsafePanelCollectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PanelCollectorServiceServer will
// result in compilation errors.
type UnsafePanelCollectorServiceServer interface {
	mustEmbedUnimplementedPanelCollectorServiceServer()
}

func RegisterPanelCollectorServiceServer(s grpc.ServiceRegistrar, srv PanelCollectorServiceServer) {
	s.RegisterService(&PanelCollectorService_ServiceDesc, srv)
}

func _PanelCollectorService_RegisterCollectorConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectorConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PanelCollectorServiceServer).RegisterCollectorConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agent.PanelCollectorService/RegisterCollectorConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PanelCollectorServiceServer).RegisterCollectorConfig(ctx, req.(*CollectorConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// PanelCollectorService_ServiceDesc is the grpc.ServiceDesc for PanelCollectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PanelCollectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agent.PanelCollectorService",
	HandlerType: (*PanelCollectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterCollectorConfig",
			Handler:    _PanelCollectorService_RegisterCollectorConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "collector.proto",
}
