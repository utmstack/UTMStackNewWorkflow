import {Component, Input, OnDestroy, OnInit} from '@angular/core';
import {Router} from '@angular/router';
import {NgxSpinnerService} from 'ngx-spinner';
import {ChartSerieValueType} from '../../../../../shared/types/chart-reponse/chart-serie-value.type';
import {VsVulnerabilityOverviewService} from '../../services/vs-vulnerability-overview.service';

export enum MetricVulnerabilityEnum {
  Critical = 'Critical',
  Warning = 'Warning',
  Info = 'Info',
  Log = 'Log'
}

@Component({
  selector: 'app-vs-overview-severity-metric',
  templateUrl: './vs-overview-severity-metric.component.html',
  styleUrls: ['./vs-overview-severity-metric.component.css']
})
export class VsOverviewSeverityMetricComponent implements OnInit, OnDestroy {
  @Input() refreshInterval = 30000;
  interval: any;
  status: ChartSerieValueType[];
  loading = true;

  constructor(private vsVulnerabilityOverviewService: VsVulnerabilityOverviewService,
              private router: Router,
              private spinner: NgxSpinnerService) {
  }

  ngOnInit() {
    this.getVulnerabilitiesStatus();
    if (this.refreshInterval) {
      this.interval = setInterval(() => {
        this.getVulnerabilitiesStatus();
      }, this.refreshInterval);
    }
  }


  getVulnerabilitiesStatus() {
    this.vsVulnerabilityOverviewService.getAssetsVulnerabilities().subscribe(res => {
      this.status = res.body;
      this.loading = false;
    });
  }

  ngOnDestroy(): void {
    clearInterval(this.interval);
  }

  chartEvent(status?: number) {
    // const queryParams = {dataNature: DataNatureTypeEnum.ALERT};
    // queryParams[ALERT_GLOBAL_FIELD] = 'alert';
    // queryParams[ALERT_STATUS_FIELD] = ElasticOperatorsEnum.IS + '->' + status;
    // queryParams[ALERT_TIMESTAMP_FIELD] = ElasticOperatorsEnum.IS_BETWEEN + '->' + this.time.timeFrom + ',' + this.time.timeTo;
    // queryParams[EVENT_IS_ALERT] = ElasticOperatorsEnum.IS + ChartValueSeparator.BUCKET_SEPARATOR + 'true';
    // this.spinner.show('loadingSpinner');
    // this.router.navigate(['/data/alert/view'], {
    //   queryParams
    // }).then(() => {
    //   this.spinner.hide('loadingSpinner');
    // });
  }

  getColor(serie: string) {
    switch (serie) {
      case MetricVulnerabilityEnum.Critical:
        return '#EF5350';
      case MetricVulnerabilityEnum.Warning:
        return '#FF9800';
      case MetricVulnerabilityEnum.Info:
        return '#42A5F5';
      case MetricVulnerabilityEnum.Log:
        return '#607D8B';
    }
  }

  getIcon(serie: string) {
    switch (serie) {
      case MetricVulnerabilityEnum.Critical:
        return 'icon-warning22';
      case MetricVulnerabilityEnum.Warning:
        return 'icon-notification2';
      case MetricVulnerabilityEnum.Info:
        return 'icon-spam';
      case MetricVulnerabilityEnum.Log:
        return 'icon-list2';
    }
  }
}
