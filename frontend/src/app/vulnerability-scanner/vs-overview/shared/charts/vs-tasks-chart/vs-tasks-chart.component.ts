import {HttpResponse} from '@angular/common/http';
import {Component, OnDestroy, OnInit} from '@angular/core';
import {Router} from '@angular/router';
import {NgbModal} from '@ng-bootstrap/ng-bootstrap';
import {UtmToastService} from '../../../../../shared/alert/utm-toast.service';
import {ITEMS_PER_PAGE} from '../../../../../shared/constants/pagination.constants';
import {SortEvent} from '../../../../../shared/directives/sortable/type/sort-event';
import {ElasticTimeEnum} from '../../../../../shared/enums/elastic-time.enum';
import {ElasticFilterCommonType} from '../../../../../shared/types/filter/elastic-filter-common.type';
import {TimeFilterType} from '../../../../../shared/types/time-filter.type';
import {TASK_FIELDS_FILTERS} from '../../../../shared/constants/task-field.const';
import {TaskResultParamType} from '../../../../shared/enums/task-result-param.type';
import {VsTaskStatusEnum} from '../../../../shared/enums/vs-task-status.enum';
import {VsTaskService} from '../../../../shared/services/vs-task.service';
import {VsTaskFilterType} from '../../../../shared/type/vs-task-filter.type';
import {VsTaskType} from '../../../../shared/type/vs-task.type';

@Component({
  selector: 'app-vs-tasks-chart',
  templateUrl: './vs-tasks-chart.component.html',
  styleUrls: ['./vs-tasks-chart.component.css']
})
export class VsTasksChartComponent implements OnInit, OnDestroy {
  tasks: VsTaskType[] = [];
  defaultTime: ElasticFilterCommonType = {time: ElasticTimeEnum.DAY, last: 7, label: 'last 7 days'};
  loading = true;
  totalItems: any;
  request: VsTaskFilterType = {
    page: 0,
    sort: 'id,desc',
    size: ITEMS_PER_PAGE,
    taskStatus: [VsTaskStatusEnum.DONE],
    taskName: null,
    taskCreationTimeIni: null,
    taskCreationTimeEnd: null,
    scanResultSeverityLabels: null,
    port: null,
    executionSources: null,
    host: null
  };
  interval: any;
  taskStatusEnum = VsTaskStatusEnum;
  fieldFilters = TASK_FIELDS_FILTERS;

  constructor(private taskService: VsTaskService,
              private modalService: NgbModal,
              private router: Router,
              private utmToastService: UtmToastService) {
  }

  ngOnInit() {
    this.interval = setInterval(() => this.getTask(), 30000);
  }

  ngOnDestroy() {
    clearInterval(this.interval);
  }

  getTask() {
    this.taskService.queryTask(this.request).subscribe(
      (res: HttpResponse<any>) => this.onSuccess(res.body, res.headers),
      (res: HttpResponse<any>) => this.onError(res.body)
    );
  }

  viewTaskResult(task: VsTaskType) {
    const queryParams = {};
    queryParams[TaskResultParamType.TYPE_DATA] = TaskResultParamType.TYPE_TASK;
    queryParams[TaskResultParamType.TASK_UUID] = task.taskUuid;
    this.router.navigate(['/vulnerability-scanner/task-result'], {queryParams});
  }

  loadPage(page: any) {
    this.request.page = page - 1;
    this.getTask();
  }


  onTimeChange($event: TimeFilterType) {
    this.request.taskCreationTimeIni = $event.timeFrom;
    this.request.taskCreationTimeEnd = $event.timeTo;
    this.getTask();
  }

  onSortBy($event: SortEvent) {
    this.request.sort = $event.column + ',' + $event.direction;
    this.getTask();
  }

  private onSuccess(data, headers) {
    this.totalItems = headers.get('X-Total-Count');
    this.tasks = data;
    this.loading = false;
  }

  private onError(error) {
    this.utmToastService.showError('Error loading task',
      'Error while to get tasks list, please contact with the support team');
  }
}
