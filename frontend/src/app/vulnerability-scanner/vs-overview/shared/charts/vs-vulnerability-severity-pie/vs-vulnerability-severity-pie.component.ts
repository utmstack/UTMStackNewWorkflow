import {Component, Input, OnDestroy, OnInit} from '@angular/core';
import {Legend} from '../../../../../shared/chart/types/charts/chart-properties/legend/legend';
import {SeriesPie} from '../../../../../shared/chart/types/charts/chart-properties/series/pie/series-pie';
import {ItemStyle} from '../../../../../shared/chart/types/charts/chart-properties/style/item-style';
import {Tooltip} from '../../../../../shared/chart/types/charts/chart-properties/tooltip/tooltip';
import {UTM_COLOR_THEME} from '../../../../../shared/constants/utm-color.const';
import {ChartTypeEnum} from '../../../../../shared/enums/chart-type.enum';
import {VsSeverityResolverService} from '../../../../../shared/services/scan/vs-severity-resolver.service';
import {PieResponseType} from '../../../../../shared/types/chart-reponse/pie-response.type';
import {VsVulnerabilityOverviewService} from '../../services/vs-vulnerability-overview.service';

@Component({
  selector: 'app-vs-vulnerability-severity-pie',
  templateUrl: './vs-vulnerability-severity-pie.component.html',
  styleUrls: ['./vs-vulnerability-severity-pie.component.css']
})
export class VsVulnerabilitySeverityPieComponent implements OnInit, OnDestroy {
  @Input() refreshInterval;
  loadingPieOption = true;
  chartTypeEnum = ChartTypeEnum;
  pieOption: any;
  interval: any;
  private noData: boolean;

  constructor(private vsVulnerabilityOverviewService: VsVulnerabilityOverviewService,
              private vsSeverityResolverService: VsSeverityResolverService) {
  }

  ngOnInit() {
    this.getVulnerabilitiesSeverity();
    if (this.refreshInterval) {
      this.interval = setInterval(() => {
        this.getVulnerabilitiesSeverity();
      }, this.refreshInterval);
    }
  }

  ngOnDestroy(): void {
    clearInterval(this.interval);
  }

  getVulnerabilitiesSeverity() {
    this.vsVulnerabilityOverviewService.getVulnerabilitiesBySeverityLabel().subscribe((response) => {
      this.loadingPieOption = false;
      if (response.body.data.length > 0) {
        this.noData = false;
        this.buildSeverityVul(response.body);
      } else {
        this.noData = true;
      }
    });
  }

  buildSeverityVul(data: PieResponseType) {
    if (data.value !== null) {
      this.pieOption = {
        animation: true,
        color: UTM_COLOR_THEME,
        tooltip: new Tooltip('item', null, null, 5),
        legend: new Legend(true, data.data, 'scroll', 'horizontal', 'bottom', 'center'),
        series: [
          new SeriesPie(
            this.buildSeveritySeries(data),
            'pie',
            '',
            ['50%', '80%'],
            ['50%', '50%'],
            new ItemStyle({
                borderWidth: 1,
                borderColor: '#fff',
                label: {
                  show: false
                },
                labelLine: {
                  show: true
                }
              },
              {
                label: {
                  show: true,
                  position: 'center',
                  textStyle: {
                    fontSize: '12',
                    fontWeight: '500'
                  }
                }
              }),
            null
          )
        ]
      };
    }
  }

  buildSeveritySeries(pieResponseType: PieResponseType) {
    const series: { name: string, value: number, itemStyle: any, cursor: string }[] = [];
    for (const serie of pieResponseType.value) {
      series.push({
        name: serie.name,
        cursor: 'normal',
        itemStyle: {
          color: this.vsSeverityResolverService.resolveColorByName(serie.name),
        },
        value: serie.value
      });
    }
    return series;
  }

  navigateFilteredByStatus($event: any) {

  }
}
