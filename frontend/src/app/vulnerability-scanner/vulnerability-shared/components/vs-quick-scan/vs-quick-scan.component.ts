import {Component, EventEmitter, OnInit, Output} from '@angular/core';
import {FormBuilder} from '@angular/forms';
import {NgbActiveModal, NgbModal} from '@ng-bootstrap/ng-bootstrap';
import {UtmModulesEnum} from '../../../../app-module/shared/enum/utm-module.enum';
import {UtmToastService} from '../../../../shared/alert/utm-toast.service';
import {UtmConfigSectionService} from '../../../../shared/services/config/utm-config-section.service';
import {SectionConfigType} from '../../../../shared/types/configuration/section-config.type';
import {VsTaskService} from '../../../shared/services/vs-task.service';
import {VsQuickScanParamType} from '../../../shared/type/vs-quick-scan-param.type';

export const IPV4_REGEX = '([1-9]|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|25[0-5])){3}\\/\\d+';
export const HOSTNAME_REGEX = '^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$';


@Component({
  selector: 'app-vs-quick-scan',
  templateUrl: './vs-quick-scan.component.html',
  styleUrls: ['./vs-quick-scan.component.css']
})
export class VsQuickScanComponent implements OnInit {
  @Output() taskCreated = new EventEmitter<string>();
  adding = false;
  regex: string;
  creating: any;
  ipValid: boolean;
  quickScan: VsQuickScanParamType = {
    excludedHosts: [],
    hosts: [],
    password: null,
    username: null,
    serverId: null,
    sshPort: null
  };
  showAdvanced = false;
  excludeValid: boolean;
  probes: SectionConfigType[];

  constructor(private fb: FormBuilder,
              private modalService: NgbModal,
              public activeModal: NgbActiveModal,
              private vsTaskService: VsTaskService,
              private utmConfigSectionService: UtmConfigSectionService,
              private toastService: UtmToastService,
              private utmToastService: UtmToastService) {
  }

  ngOnInit(): void {
    this.getSections();
  }

  create() {
    this.creating = true;
    this.vsTaskService.quickScan(this.quickScan).subscribe(response => {
      this.utmToastService.showSuccessBottom('Task created successfully');
      this.creating = false;
      this.activeModal.close();
      this.taskCreated.emit(response.body.taskId);
    }, error => {
      this.utmToastService.showError('Error', 'Error while trying to create task');
    });
  }

  getSections() {
    this.utmConfigSectionService.query({
      page: 0, size: 10000, 'moduleNameShort.specified': true,
      'moduleNameShort.equals': UtmModulesEnum.VULNERABILITIES
    })
      .subscribe(response => {
        this.probes = response.body;
      }, error => {
        this.toastService.showError('Error', 'Error getting probes');
      });
  }

  validIp(value: string) {
    const regexpIpv4 = new RegExp(IPV4_REGEX);
    const regexpHost = new RegExp(HOSTNAME_REGEX);
    this.ipValid = regexpIpv4.test(value) || regexpHost.test(value);
  }

  validExclusion(value: string) {
    const regexpIpv4 = new RegExp(IPV4_REGEX);
    const regexpHost = new RegExp(HOSTNAME_REGEX);
    this.excludeValid = regexpIpv4.test(value) || regexpHost.test(value);
  }


  addIp(value: string) {
    this.quickScan.hosts.push(value);
  }

  ipHasAdded(value: string) {
    return this.quickScan.hosts.findIndex(control => control === value) !== -1;
  }

  deleteIp(index: number) {
    this.quickScan.hosts.splice(index, 1);
  }

  addExclude(value: string) {
    this.quickScan.excludedHosts.push(value);
  }

  excludeHasAdded(value: string) {
    return this.quickScan.excludedHosts.findIndex(control => control === value) !== -1;
  }

  deleteExclude(index: number) {
    this.quickScan.excludedHosts.splice(index, 1);
  }

  selectProbe($event: unknown) {

  }
}
