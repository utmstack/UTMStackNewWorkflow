import {HttpClient, HttpHeaders, HttpResponse} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {SERVER_API_URL} from '../../../app.constants';
import {createRequestOption} from '../../../shared/util/request-util';
import {VsTaskType} from '../type/vs-task.type';

@Injectable({
  providedIn: 'root'
})
export class VsTaskResultService {
  public resourceUrl = SERVER_API_URL + 'api/utm-gvm-scan-result/';

  constructor(private http: HttpClient) {
  }

  queryTaskResult(req?: any): Observable<HttpResponse<VsTaskType[]>> {
    const options = createRequestOption(req);
    return this.http.get<VsTaskType[]>(this.resourceUrl + 'scan-results-by-filter',
      {params: options, observe: 'response'});
  }

  searchPropertyValue(req?: any): Observable<HttpResponse<any[]>> {
    const options = createRequestOption(req);
    return this.http.get<any[]>(this.resourceUrl + 'search-property-values',
      {params: options, observe: 'response'});
  }

  public exportResultToPdf(taskId?: string,
                           basic?: boolean): Observable<Blob> {
    const headers = new HttpHeaders();
    headers.append('Accept', 'application/octet-stream');
    return this.http.get(this.resourceUrl + 'scan-result-report?' +
      '&taskUuid=' + taskId + '&basic=' + basic,
      {headers, responseType: 'blob'});
  }
}
