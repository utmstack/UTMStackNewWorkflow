import {HttpResponse} from '@angular/common/http';
import {Component, OnInit} from '@angular/core';
import {ActivatedRoute} from '@angular/router';
import {NgbModal} from '@ng-bootstrap/ng-bootstrap';
import {UtmToastService} from '../../shared/alert/utm-toast.service';
import {ITEMS_PER_PAGE} from '../../shared/constants/pagination.constants';
import {SortEvent} from '../../shared/directives/sortable/type/sort-event';
import {TaskResultParamType} from '../shared/enums/task-result-param.type';
import {VsTaskStatusEnum} from '../shared/enums/vs-task-status.enum';
import {VsTaskResultService} from '../shared/services/vs-task-result.service';
import {VsTaskService} from '../shared/services/vs-task.service';
import {VsTaskResultType} from '../shared/type/vs-task-result.type';
import {VsTaskType} from '../shared/type/vs-task.type';
import {VsSeverityInfoComponent} from '../vulnerability-shared/components/vs-severity-info/vs-severity-info.component';

@Component({
  selector: 'app-vs-task-result',
  templateUrl: './vs-task-result.component.html',
  styleUrls: ['./vs-task-result.component.css']
})
export class VsTaskResultComponent implements OnInit {
  results: VsTaskResultType[] = [];
  request = {
    page: 0,
    size: ITEMS_PER_PAGE,
    sort: 'result_severity,desc',
    taskUuid: null,
    hosts: null
  };
  totalItems: any;
  loading = true;
  page = 1;
  itemsPerPage = ITEMS_PER_PAGE;
  viewDetail: VsTaskResultType;
  details: null;
  task: VsTaskType;
  typeResult: TaskResultParamType.TYPE_ASSET | TaskResultParamType.TYPE_TASK;
  taskResultParamType = TaskResultParamType;
  hostResult: string;
  taskStatusEnum = VsTaskStatusEnum;

  constructor(private vsTaskResultService: VsTaskResultService,
              private vsTaskService: VsTaskService,
              private utmToastService: UtmToastService,
              protected modalService: NgbModal,
              private activatedRoute: ActivatedRoute) {

  }

  ngOnInit() {
    this.activatedRoute.queryParams.subscribe(value => {
      if (value[TaskResultParamType.TYPE_DATA] === TaskResultParamType.TYPE_TASK) {
        this.request.taskUuid = value[TaskResultParamType.TASK_UUID];
        this.getTask(this.request.taskUuid);
        this.typeResult = TaskResultParamType.TYPE_TASK;
      } else if (value[TaskResultParamType.TYPE_DATA] === TaskResultParamType.TYPE_ASSET) {
        this.typeResult = TaskResultParamType.TYPE_ASSET;
        this.hostResult = value[TaskResultParamType.HOST_IP];
        this.vsTaskService.getLastScanForHost({host: this.hostResult, results: false})
          .subscribe(taskResponse => {
            if (taskResponse.body) {
              this.request.taskUuid = taskResponse.body.taskUuid;
              this.request.hosts = [this.hostResult];
              this.getTaskResult();
            } else {
              this.results = [];
              this.loading = false;
            }
          });
      }
    });
  }

  getTask(taskID: string) {
    this.vsTaskService.getSingleTask({uuid: taskID, results: false}).subscribe(response => {
      this.task = response.body;
      this.getTaskResult();
    });

  }

  getTaskResult() {
    this.vsTaskResultService.queryTaskResult(this.request).subscribe(
      (res: HttpResponse<any>) => this.onSuccess(res.body, res.headers),
      (res: HttpResponse<any>) => this.onError(res.body)
    );
  }

  saveReport() {

  }

  onSortBy($event: SortEvent) {
    this.request.sort = $event.column + ',' + $event.direction;
    this.getTaskResult();
  }

  viewSeverityHelp() {
    this.modalService.open(VsSeverityInfoComponent, {centered: true});
  }

  viewAssetDetail(value) {

  }

  loadPage($event: number) {
    this.request.page = $event - 1;
    this.getTaskResult();
  }

  private onSuccess(data, headers) {
    this.totalItems = headers.get('X-Total-Count');
    this.results = data;
    this.loading = false;
  }

  private onError(error) {
    this.utmToastService.showError('Error loading task',
      'Error while to get tasks list, please contact with the support team');
  }
}
