import {HttpResponse} from '@angular/common/http';
import {Component, OnInit} from '@angular/core';
import {DomSanitizer} from '@angular/platform-browser';
import {ActivatedRoute, Router} from '@angular/router';
import * as moment from 'moment';
import {NgxSpinnerService} from 'ngx-spinner';
import {AccountService} from '../../../core/auth/account.service';
import {Account} from '../../../core/user/account.model';
import {ThemeChangeBehavior} from '../../../shared/behaviors/theme-change.behavior';
import {UtmTableDetailComponent} from '../../../shared/components/utm/table/utm-table/utm-table-detail/utm-table-detail.component';
import {
  ALERT_CASE_ID_FIELD,
  ALERT_CATEGORY_FIELD,
  ALERT_FIELDS,
  ALERT_GENERATED_BY_FIELD,
  ALERT_ID_FIELD,
  ALERT_NAME_FIELD,
  ALERT_OBSERVATION_FIELD,
  ALERT_PROTOCOL_FIELD,
  ALERT_SENSOR_FIELD,
  ALERT_SEVERITY_FIELD_LABEL,
  ALERT_STATUS_FIELD,
  ALERT_TACTIC_FIELD,
  ALERT_TIMESTAMP_FIELD
} from '../../../shared/constants/alert/alert-field.constant';
import {LOG_ROUTE} from '../../../shared/constants/app-routes.constant';
import {LOG_INDEX_PATTERN, LOG_INDEX_PATTERN_ID} from '../../../shared/constants/main-index-pattern.constant';
import {ElasticDataTypesEnum} from '../../../shared/enums/elastic-data-types.enum';
import {ElasticOperatorsEnum} from '../../../shared/enums/elastic-operators.enum';
import {DataNatureTypeEnum} from '../../../shared/enums/nature-data.enum';
import {ElasticDataService} from '../../../shared/services/elasticsearch/elastic-data.service';
import {AlertTags} from '../../../shared/types/alert/alert-tag.type';
import {AlertStatusEnum, UtmAlertType} from '../../../shared/types/alert/utm-alert.type';
import {ElasticFilterType} from '../../../shared/types/filter/elastic-filter.type';
import {UtmFieldType} from '../../../shared/types/table/utm-field.type';
import {AlertDetailTabEnum} from '../shared/components/alert-view-detail/alert-view-detail.component';
import {AlertHistoryActionEnum} from '../shared/enums/alert-history-action.enum';
import {EventDataTypeEnum} from '../shared/enums/event-data-type.enum';
import {AlertTagService} from '../shared/services/alert-tag.service';

@Component({
  selector: 'app-alert-full-detail',
  templateUrl: './alert-full-detail.component.html',
  styleUrls: ['./alert-full-detail.component.scss']
})
export class AlertFullDetailComponent implements OnInit {
  alert: UtmAlertType;
  printFormat: any;
  filterAlert: ElasticFilterType[];
  filterEvent: ElasticFilterType[];
  alertId: string;
  loadingAlert = true;
  rows: any[];
  loadingEvents = true;
  componentDetail = UtmTableDetailComponent;
  fields: UtmFieldType[] =
    [
      {field: '@timestamp', visible: true, label: 'Generated on', type: ElasticDataTypesEnum.DATE},
      {field: 'es_metadata_id', visible: true, label: 'Event ID', type: ElasticDataTypesEnum.STRING},
      {field: 'logx.type', visible: true, label: 'Generated by', type: ElasticDataTypesEnum.STRING},
    ];
  noAlertFound = false;
  dataType: EventDataTypeEnum;
  eventDataTypeEnum = EventDataTypeEnum;
  logoImage: string;
  tags: AlertTags[];
  account: Account;
  cover: string;
  date = new Date();

  ALERT_NAME = ALERT_NAME_FIELD;
  STATUS_FIELD = ALERT_STATUS_FIELD;
  SEVERITY_FIELD = ALERT_SEVERITY_FIELD_LABEL;
  OBSERVATION_FIELD = ALERT_OBSERVATION_FIELD;
  CATEGORY_FIELD = ALERT_CATEGORY_FIELD;
  SENSOR_FIELD = ALERT_SENSOR_FIELD;
  TIMESTAMP_FIELD = ALERT_TIMESTAMP_FIELD;
  PROTOCOL_FIELD = ALERT_PROTOCOL_FIELD;
  CASE_ID_FIELD = ALERT_CASE_ID_FIELD;
  GENERATED_BY_FIELD = ALERT_GENERATED_BY_FIELD;
  ALERT_TACTIC_FIELD = ALERT_TACTIC_FIELD;
  countRelatedEvents: number;
  viewHistory = false;
  viewLog = false;
  viewOnMap = true;
  alertActionEnum = AlertHistoryActionEnum;
  logs: string[];
  reference: string[] = [];
  log: any;
  getLastLog: boolean;
  viewRelatedRules = false;
  relatedTagsRules: number[];
  view = AlertDetailTabEnum.DETAIL;
  alertDetailTabEnum = AlertDetailTabEnum;

  constructor(private elasticDataService: ElasticDataService,
              private router: Router,
              private spinner: NgxSpinnerService,
              public sanitizer: DomSanitizer,
              private accountService: AccountService,
              private alertTagService: AlertTagService,
              private themeChangeBehavior: ThemeChangeBehavior,
              private activatedRoute: ActivatedRoute) {
  }

  ngOnInit() {
    this.spinner.show('alertDetail');
    this.activatedRoute.params.subscribe(params => {
      this.alertId = params.id;
      if (this.alertId) {
        this.filterAlert = [{
          field: ALERT_CASE_ID_FIELD,
          operator: ElasticOperatorsEnum.IS,
          value: this.alertId
        }];
        this.searchAlert();
      }
    });

    this.getTags();
    this.accountService.identity().then(account => {
      this.account = account;
    });

    this.themeChangeBehavior.$themeReportCover.subscribe(img => {
      this.cover = img;
    });


    window.addEventListener('beforeprint', (event) => {
      this.printFormat = true;
    });
    window.addEventListener('afterprint', (event) => {
      this.printFormat = false;
    });


  }

  searchAlert() {
    this.elasticDataService.search(1, 1, 1, DataNatureTypeEnum.ALERT, this.filterAlert)
      .subscribe(reponse => {
        this.alert = reponse.body[0];
        this.loadingAlert = false;
        if (this.alert) {
          this.logs = this.alert.logs;
          this.countRelatedEvents = this.logs.length;
          const ref = this.alert.reference;
          this.reference = (ref && typeof ref !== 'string') ? ref : [];
          this.relatedTagsRules = this.alert.tagRulesApplied;
          this.filterEvent = [{
            field: 'id',
            operator: ElasticOperatorsEnum.IS_ONE_OF,
            value: this.alert.logs.reverse().slice(0, 100)
          }];
          this.resolveDataType().then(type => {
            this.dataType = type;
          });
          this.searchLastLog();
          this.searchEventByAlert();
        } else {
          this.noAlertFound = true;
        }
      });
  }

  resolveDataType(): Promise<EventDataTypeEnum> {
    return new Promise<EventDataTypeEnum>(resolve => {
      resolve(EventDataTypeEnum.ALERT);
    });
  }

  searchEventByAlert() {
    this.elasticDataService.search(1, 100, 100, DataNatureTypeEnum.EVENT, this.filterEvent)
      .subscribe(reponse => {
        this.rows = reponse.body;
        this.loadingEvents = false;
        this.spinner.hide('alertDetail');
      });
  }

  print() {
    this.printFormat = true;
    setTimeout(() => {
      window.print();
    }, 2000);
  }

  dateGenerated() {
    return moment(new Date()).format('YYYY-MM-DD HH:MM:ss');
  }

  getAlertName() {
    return '[' + this.alert.id.substring(0, 8) + '] ' + this.alert.name;
  }


  navigateToManagement() {
    this.spinner.show('loadingSpinner');
    const queryParams = {alertType: 'ALERT'};
    this.router.navigate(['/data/alert/view'], {queryParams}).then(() => {
      this.spinner.hide('loadingSpinner');
    });
  }

  getTags() {
    this.alertTagService.query({page: 0, size: 1000}).subscribe(reponse => {
      this.tags = reponse.body;
    });
  }

  getFieldByName(name): UtmFieldType {
    return ALERT_FIELDS.find(value => value.field === name);
  }

  isIgnoredAlert() {
    return AlertStatusEnum.IGNORED === this.alert.status;
  }

  isIncident(): boolean {
    return this.alert.isIncident;
  }

  navigateToEvents() {
    const queryParams = {patternId: LOG_INDEX_PATTERN_ID, indexPattern: LOG_INDEX_PATTERN};
    const LOG_ID_FIELD = 'id';
    queryParams[LOG_ID_FIELD] = ElasticOperatorsEnum.IS_ONE_OF_TERMS + '->' + this.logs.reverse().slice(0, 100);
    this.spinner.show('loadingSpinner');
    this.router.navigate([LOG_ROUTE], {
      queryParams
    }).then(() => {
      this.spinner.hide('loadingSpinner');
    });
  }

  showMap(): boolean {
    return this.alert.source && this.alert.destination &&
      this.alert.source.coordinates.length > 0 && this.alert.destination.coordinates.length > 0;
  }

  searchLastLog() {
    if (!this.log) {
      this.getLastLog = true;
      const filter: ElasticFilterType[] = [{field: ALERT_ID_FIELD, operator: ElasticOperatorsEnum.IS, value: this.logs.reverse()[0]}];
      this.elasticDataService.search(1, 1,
        1, LOG_INDEX_PATTERN, filter).subscribe(
        (res: HttpResponse<any>) => {
          this.log = res.body[0];
          this.getLastLog = false;
        },
        (res: HttpResponse<any>) => {
        }
      );
    }
  }

}
