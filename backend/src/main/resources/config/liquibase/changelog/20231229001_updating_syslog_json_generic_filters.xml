<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="20231229001" author="Freddy">

        <sql dbms="postgresql" splitStatements="true" stripComments="true">
            <![CDATA[
            -- Updating generic pipeline filter
            UPDATE utm_logstash_filter
            SET logstash_filter='filter {
# Generic pipeline filter, version 1.0.1
# Supports plain logs and simple json logs

split {
 field => "message"
 terminator => "<utm-log-separator>"
}

#Looking for datasource generated by an agent and parse original message
if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
  grok {
    match => {
     "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
    }
  }
}
if [original_log_message] {
  mutate {
    update => { "message" => "%{[original_log_message]}" }
  }
}
#......................................................................#
#Generating dataSource and dataType fields required by CurrelationRulesEngine
if ![dataSource] {
  mutate {
    add_field => { "dataSource" => "%{host}" }
  }
}
if ![dataType] {
  mutate {
    add_field => {"dataType" => "generic"}
  }
}
#......................................................................#
#Adding json support
if [message] =~/^\{/ {
   json {
     source => "message"
   }
}

#Remove unwanted fields if the message not match with conditions
  mutate {
    remove_field => ["@version","original_log_message","headers"]
  }
}
',filter_version='1.0.1'
            WHERE id=1521;

-- Updating Syslog filter
            UPDATE utm_logstash_filter
            SET logstash_filter='filter {
# Syslog filter, version 1.0.1

split {
 field => "message"
 terminator => "<utm-log-separator>"
}

#Looking for datasource generated by an agent and parse original message
if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
  grok {
    match => {
     "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
    }
  }
}
if [original_log_message] {
  mutate {
    update => { "message" => "%{[original_log_message]}" }
  }
}
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
if ![dataSource] {
  mutate {
    add_field => { "dataSource" => "%{host}" }
  }
}
#......................................................................#
#Generating logx structure
if ![dataType] {
  mutate {
    add_field => {"dataType" => "syslog"}
    rename => ["message", "[logx][syslog][message]"]
  }
}
#Remove unwanted fields if the message not match with conditions
  mutate {
    remove_field => ["@version","original_log_message","headers"]
  }
}
',filter_version='1.0.1'
            WHERE id=1520;

-- Updating json input filter
            UPDATE utm_logstash_filter
            SET logstash_filter='filter {
#Filter version 1.0.2
#Used to format generic json files

    if [message] {
        split {
          field => "message"
          terminator => "<utm-log-separator>"
        }
        json {
          source => "message"
          target => "json_input"
        }

        #Create logx structure
        mutate {
            rename => { "[message]" => "[logx][json_input][message]" }
            rename => { "[json_input]" => "[logx][json_input]" }
        }

        #Generating dataType and dataSource fields
        if ![dataType] {
          mutate {
            add_field => { "dataType" => "json-input" }
          }
        }
        if ![dataSource] {
         if [logx][json_input][dataSource]{
          mutate {
            rename => { "[logx][json_input][dataSource]" => "[dataSource]" }
          }
         } else {
          mutate {
            add_field => { "dataSource" => "%{host}" }
          }
         }
        }
    }

    #Finally remove unused fields
    mutate {
        remove_field => ["path","@version","host","headers"]
    }
}
',filter_version='1.0.2'
            WHERE id=1515;

            ]]>
        </sql>
    </changeSet>
</databaseChangeLog>
