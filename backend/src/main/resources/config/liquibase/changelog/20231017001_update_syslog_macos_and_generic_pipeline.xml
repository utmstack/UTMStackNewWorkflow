<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <changeSet id="20231017001" author="Freddy">

        <sql dbms="postgresql" splitStatements="true" stripComments="true">
            <![CDATA[
            ------------------------
            --Adding syslog filter--
            ------------------------
            INSERT INTO utm_logstash_filter (id,logstash_filter,filter_name,system_owner,module_name,is_active,filter_version)
            VALUES (1520,'filter {
# Syslog filter, version 1.0.0

split {
 field => "message"
 terminator => "<utm-log-separator>"
}

#Looking for datasource generated by an agent and parse original message
if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
  grok {
    match => {
     "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
    }
  }
}
if [original_log_message] {
  mutate {
    update => { "message" => "%{[original_log_message]}" }
  }
}
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
if ![dataSource] {
  mutate {
    add_field => { "dataSource" => "%{host}" }
  }
}
#......................................................................#
#Generating logx structure
  mutate {
    add_field => {"dataType" => "syslog"}
    rename => ["message", "[logx][syslog][message]"]
  }

#Remove unwanted fields if the message not match with conditions
  mutate {
    remove_field => ["@version","original_log_message","headers"]
  }
}
','syslog',true,'SYSLOG',true,'1.0.0');

            -------------------------
            --Adding generic filter--
            -------------------------
            INSERT INTO utm_logstash_filter (id,logstash_filter,filter_name,system_owner,is_active,filter_version)
            VALUES (1521,'filter {
# Generic pipeline filter, version 1.0.0
# Supports plain logs and simple json logs

split {
 field => "message"
 terminator => "<utm-log-separator>"
}

#Looking for datasource generated by an agent and parse original message
if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
  grok {
    match => {
     "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
    }
  }
}
if [original_log_message] {
  mutate {
    update => { "message" => "%{[original_log_message]}" }
  }
}
#......................................................................#
#Generating dataSource and dataType fields required by CurrelationRulesEngine
if ![dataSource] {
  mutate {
    add_field => { "dataSource" => "%{host}" }
  }
}
  mutate {
    add_field => {"dataType" => "generic"}
  }

#......................................................................#
#Adding json support
if [message] =~/^\{/ {
   json {
     source => "message"
   }
}

#Remove unwanted fields if the message not match with conditions
  mutate {
    remove_field => ["@version","original_log_message","headers"]
  }
}
','generic',true,true,'1.0.0');


            INSERT INTO utm_group_logstash_pipeline_filters (filter_id,pipeline_id,relation)
            VALUES (1520,1000,'PIPELINE FILTER');
            INSERT INTO utm_group_logstash_pipeline_filters (filter_id,pipeline_id,relation)
            VALUES (1521,46,'PIPELINE FILTER');

            UPDATE utm_logstash_pipeline
            SET pipeline_id='macos_logs'
            WHERE id=17;

            ]]>
        </sql>
    </changeSet>
</databaseChangeLog>
