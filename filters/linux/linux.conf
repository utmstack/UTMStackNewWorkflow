filter {
    # Linux filter version 2.0.2
    split {
      field => "message"
      terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }

    if ![dataType]{
      if [message] and !([message]=~/\[UFW \w+\]/){
        grok {
            match => {
                "message" => [
                    "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:rsyslogDataSource} %{DATA:process}(\[%{POSINT:pid}\])?: %{GREEDYDATA:msg}",
                    "%{GREEDYDATA}%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:rsyslogDataSource} %{DATA:process}(\[%{POSINT:pid}\])?: %{GREEDYDATA:msg}"
                ]
            }
        }

        #......................................................................#
        #Generating dataSource field required by CurrelationRulesEngine
        #Checks if rsyslogDataSource exists, if true, the dataSource field take its value, if not, take the agent dataSource value
        if ([rsyslogDataSource]){
            if [dataSource] {
              mutate {
                update => { "dataSource" => "%{[rsyslogDataSource]}" }
              }
            } else {
              mutate {
                add_field => { "dataSource" => "%{rsyslogDataSource}" }
              }
            }
        }
        #Finally evaluates to the host variable if can not be calculated
        if ![dataSource] {
           mutate {
              add_field => { "dataSource" => "%{host}" }
           }
        }
        
        if [timestamp] and [dataSource] and [process]{
            mutate {
              remove_field => [ "message" ]
              #Generating dataType field required by CurrelationRulesEngine
              add_field => {"[dataType]" => "rsyslog-linux"}

              # Rename fields
              rename => { "[process]" => "[logx][rsyslog_linux][process]" }
              rename => { "[pid]" => "[logx][rsyslog_linux][pid]" }
              rename => { "[msg]" => "[logx][rsyslog_linux][msg]" }

              #Finally, remove unnecessary fields
              remove_field => ["timestamp", "@version","path","type"]
           }
        }
      }
    }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["@version","rsyslogDataSource","original_log_message","headers"]
   }
}
