filter {
    # Linux UFW filter version 2.0.1
    split {
      field => "message"
      terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }
    
    if ![dataType]{
      if [message] {
        grok {
            match => {
                "message" => [
                    "%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:ufwDataSource} %{DATA:process}(?:\[%{POSINT:pid}\])?:( \[%{NUMBER}\])? \[UFW %{WORD:ufw_action}\] IN=%{DATA:ufw_interface} OUT= MAC=%{DATA:ufw_mac} SRC=%{IP:ufw_src_ip} DST=%{IP:ufw_dest_ip} %{GREEDYDATA} PROTO=%{WORD:ufw_proto} SPT=%{INT:ufw_src_port} DPT=%{INT:ufw_dst_port} %{GREEDYDATA}",
                    "%{GREEDYDATA}%{SYSLOGTIMESTAMP:timestamp} %{SYSLOGHOST:ufwDataSource} %{DATA:process}(?:\[%{POSINT:pid}\])?:( \[%{NUMBER}\])? \[UFW %{WORD:ufw_action}\] IN=%{DATA:ufw_interface} OUT= MAC=%{DATA:ufw_mac} SRC=%{IP:ufw_src_ip} DST=%{IP:ufw_dest_ip} %{GREEDYDATA} PROTO=%{WORD:ufw_proto} SPT=%{INT:ufw_src_port} DPT=%{INT:ufw_dst_port} %{GREEDYDATA}"
                ]
            }
        }
      }
    }

#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if ufwDataSource exists, if true, the dataSource field take its value, if not, take the agent dataSource value
    if ([ufwDataSource]){
        if [dataSource] {
          mutate {
            update => { "dataSource" => "%{[ufwDataSource]}" }
          }
        } else {
          mutate {
            add_field => { "dataSource" => "%{ufwDataSource}" }
          }
        }
    }
#Finally evaluates to the host variable if can not be calculated
    if ![dataSource] {
       mutate {
          add_field => { "dataSource" => "%{host}" }
       }
    }

    if [ufw_action] and ([ufw_action] == "BLOCK" or [ufw_action] == "ALLOW") {
        mutate {
            remove_field => [ "message" ]
            add_field => {"[dataType]" => "firewall-ufw"}
            rename => {
                "[process]" => "[logx][ufw][process]"
            }
            rename => {
                "[pid]" => "[logx][ufw][pid]"
            }
            rename => {
                "[ufw_action]" => "[logx][ufw][action]"
            }
            rename => {
                "[ufw_interface]" => "[logx][ufw][interface]"
            }
            rename => {
                "[ufw_mac]" => "[logx][ufw][mac]"
            }
            rename => {
                "[ufw_src_ip]" => "[logx][ufw][src_ip]"
            }
            rename => {
                "[ufw_dest_ip]" => "[logx][ufw][dest_ip]"
            }
            rename => {
                "[ufw_proto]" => "[logx][ufw][proto]"
            }
            rename => {
                "[ufw_src_port]" => "[logx][ufw][src_port]"
            }
            rename => {
                "[ufw_dst_port]" => "[logx][ufw][dest_port]"
            }
            rename => {
                "[timestamp]" => "[logx][ufw][timestamp]"
            }
        }
    }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["@version","ufwDataSource","original_log_message","headers"]
   }
}
