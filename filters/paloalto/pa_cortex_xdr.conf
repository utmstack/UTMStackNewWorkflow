filter {

# Palo Alto Cortex XDR filter version 2.0.0
# Support Syslog CEF format and Syslog CSV format
# Based on CORTEX XDR Pro Administrators Guide version 3.3
# https://docs.paloaltonetworks.com/cortex/cortex-xdr/cortex-xdr-pro-admin/logs/cortex-xdr-log-notification-formats (june, 2022)

    split {
     field => "message"
     terminator => "<utm-log-separator>"
    }

    if ![dataType] {
        #First, search to define the entry point contain CEF:, contain |something, or look for Palo Alto
        #Also can be syslog CSV format
        if [message] and ( ( ("CEF:" in [message] or "LEEF:" in [message]) and [message] =~/\|(\w+)?(\s)?Palo(\s)Alto(\s)Networks(\s)?(\w+)?\|/ and [message] =~/\|(\w+)?(\s)?Cortex XDR(\s)?(\w+)?\|/ ) 
        or ( [message] =~/(threat)(\s)?,(.+),(\s)?(AgentActionReport|AgentDeviceControlViolation|AgentGenericMessage|AgentSamReport|AgentScanReport|AgentSecurityEvent|AgentStatistics|AgentTimelineEvent|ServerLogPerAgent|ServerLogPerTenant|ServerLogSystem)(\s)?,(.+),(\s)?(CYSTATUS_)(.+)/ ) 
        or (( [message] =~/(config)(\s)?,(\s)?(config)(\s)?,(.+),(\s)?(deviceManagement|distributionManagement|reportManagement|securityEventManagement|systemManagement)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(policy)(\s)?,(.+),(\s)?(exceptionManagement|policyManagement|profileManagement|sam)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(agent_log)(\s)?,(.+),(\s)?(agentFlow)(\s)?,(.+)/ ) ) 
        or (( [message] =~/(analytics)(\s)?,(\s)?(config)(\s)?,(.+),(\s)?(deviceManagement|distributionManagement|reportManagement|securityEventManagement|systemManagement)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(policy)(\s)?,(.+),(\s)?(exceptionManagement|policyManagement|profileManagement|sam)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(agent_log)(\s)?,(.+),(\s)?(agentFlow)(\s)?,(.+)/ ) ) 
        or (( [message] =~/(system)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) ) ){
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if exists, if not evaluate to the host variable
           if (![dataSource]){
              mutate {
               add_field => { "dataSource" => "%{host}" }
              }
           }
#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
              mutate {
               add_field => { "dataType" => "paloalto-cortex-xdr" }
              }
#......................................................................#
#If CEF formatted log do the parsing of the message
        if ("CEF:" in [message] or "LEEF:" in [message]) {
#......................................................................#
#Using grok to parse header of the message
            grok {
              match => {
                "message" => [
                   "(%{INT:not_defined})?(\s)?(<%{NUMBER:priority}>)?(%{INT:syslog_version})?((\s)%{GREEDYDATA:syslog_date_host}(\s))?(?<format_type>(CEF|LEEF)):(\s)?(?<format_version>(%{INT}\.%{INT}|%{INT}))%{GREEDYDATA:cef_or_leef_msg_all}"
                ]
              }
            }
#......................................................................#
#If CSV formatted log do the parsing of the message (Threat Logs) 
        } else if ( [message] =~/(threat)(\s)?,(.+),(\s)?(AgentActionReport|AgentDeviceControlViolation|AgentGenericMessage|AgentSamReport|AgentScanReport|AgentSecurityEvent|AgentStatistics|AgentTimelineEvent|ServerLogPerAgent|ServerLogPerTenant|ServerLogSystem)(\s)?,(.+),(\s)?(CYSTATUS_)(.+)/ ) {
           csv {
              source => "message"
              skip_header => "true"
              columns => ["recordType", "class", "FUTURE_USE", "eventType", "generatedTime", "serverTime", 
                         "agentTime", "tzOffset", "FUTURE_USE", "facility", "customerId", "trapsId", "serverHost", 
                         "serverComponentVersion", "regionId", "isEndpoint", "agentId", "osType", "isVdi", "osVersion", "is64", 
                         "agentIp", "deviceName", "deviceDomain", "severity", "trapsSeverity", "agentVersion", "contentVersion", 
                         "protectionStatus", "preventionKey", "moduleId", "profile", "moduleStatusId", "verdict", "preventionMode", 
                         "terminate", "terminateTarget", "quarantine", "block", "postDetected", "eventParameters", 
                         "sourceProcessIdx", "targetProcessIdx", "fileIdx", "processes", "files", 
                         "users", "urls", "description"]
           }
# Then, move fields to logx structure
           mutate {
              rename => { "[recordType]" => "[kv_field][recordType]" }
              rename => { "[class]" => "[kv_field][class]" }
              rename => { "[FUTURE_USE]" => "[kv_field][FUTURE_USE]" }
              rename => { "[eventType]" => "[kv_field][eventType]" }
              rename => { "[generatedTime]" => "[kv_field][generatedTime]" }
              rename => { "[serverTime]" => "[kv_field][serverTime]" }
              rename => { "[agentTime]" => "[kv_field][agentTime]" }
              rename => { "[tzOffset]" => "[kv_field][tzOffset]" }
              rename => { "[facility]" => "[kv_field][facility]" }
              rename => { "[customerId]" => "[kv_field][customerId]" }
              rename => { "[trapsId]" => "[kv_field][trapsId]" }
              rename => { "[serverHost]" => "[kv_field][serverHost]" }
              rename => { "[serverComponentVersion]" => "[kv_field][serverComponentVersion]" }
              rename => { "[regionId]" => "[kv_field][regionId]" }
              rename => { "[isEndpoint]" => "[kv_field][isEndpoint]" }
              rename => { "[agentId]" => "[kv_field][agentId]" }
              rename => { "[osType]" => "[kv_field][osType]" }
              rename => { "[isVdi]" => "[kv_field][isVdi]" }
              rename => { "[osVersion]" => "[kv_field][osVersion]" }
              rename => { "[is64]" => "[kv_field][is64]" }
              rename => { "[agentIp]" => "[kv_field][agentIp]" }
              rename => { "[deviceName]" => "[kv_field][deviceName]" }
              rename => { "[deviceDomain]" => "[kv_field][deviceDomain]" }
              rename => { "[severity]" => "[kv_field][severity]" }
              rename => { "[trapsSeverity]" => "[kv_field][trapsSeverity]" }
              rename => { "[agentVersion]" => "[kv_field][agentVersion]" }
              rename => { "[contentVersion]" => "[kv_field][contentVersion]" }
              rename => { "[protectionStatus]" => "[kv_field][protectionStatus]" }
              rename => { "[preventionKey]" => "[kv_field][preventionKey]" }
              rename => { "[moduleId]" => "[kv_field][moduleId]" }
              rename => { "[profile]" => "[kv_field][profile]" }
              rename => { "[moduleStatusId]" => "[kv_field][moduleStatusId]" }
              rename => { "[verdict]" => "[kv_field][verdict]" }
              rename => { "[preventionMode]" => "[kv_field][preventionMode]" }
              rename => { "[terminate]" => "[kv_field][terminate]" }
              rename => { "[terminateTarget]" => "[kv_field][terminateTarget]" }
              rename => { "[quarantine]" => "[kv_field][quarantine]" }
              rename => { "[block]" => "[kv_field][block]" }
              rename => { "[postDetected]" => "[kv_field][postDetected]" }
              rename => { "[eventParameters]" => "[kv_field][eventParameters]" }
              rename => { "[sourceProcessIdx]" => "[kv_field][sourceProcessIdx]" }
              rename => { "[targetProcessIdx]" => "[kv_field][targetProcessIdx]" }
              rename => { "[fileIdx]" => "[kv_field][fileIdx]" }
              rename => { "[processes]" => "[kv_field][processes]" }
              rename => { "[files]" => "[kv_field][files]" }
              rename => { "[users]" => "[kv_field][users]" }
              rename => { "[urls]" => "[kv_field][urls]" }
              rename => { "[description]" => "[kv_field][description]" }
           }
#CSV formatted log do the parsing of the message (Config Logs)
        } else if ( [message] =~/(config)(\s)?,(\s)?(config)(\s)?,(.+),(\s)?(deviceManagement|distributionManagement|reportManagement|securityEventManagement|systemManagement)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(policy)(\s)?,(.+),(\s)?(exceptionManagement|policyManagement|profileManagement|sam)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) 
               or ( [message] =~/(config)(\s)?,(\s)?(agent_log)(\s)?,(.+),(\s)?(agentFlow)(\s)?,(.+)/ ) {
           csv {
              source => "message"
              skip_header => "true"
              columns => ["recordType", "class", "FUTURE_USE", "subClassId", "eventType", "eventCategory", 
                          "generatedTime", "serverTime", "FUTURE_USE", "facility", "customerId", "trapsId", "serverHost", 
                          "serverComponentVersion", "regionId", "isEndpoint", "severity", "trapsSeverity", "messageCode", 
                          "friendlyName", "FUTURE_USE", "msgTextEn", "userFullName", "userName", "userRole", "userDomain", 
                          "additionalData", "messageCode2", "errorText", "errorData", "resultData"
              ]
           }
# Then, move fields to logx structure
           mutate {
              rename => { "[recordType]" => "[kv_field][recordType]" }
              rename => { "[class]" => "[kv_field][class]" }
              rename => { "[FUTURE_USE]" => "[kv_field][FUTURE_USE]" }
              rename => { "[subClassId]" => "[kv_field][subClassId]" }
              rename => { "[eventType]" => "[kv_field][eventType]" }
              rename => { "[eventCategory]" => "[kv_field][eventCategory]" }
              rename => { "[generatedTime]" => "[kv_field][generatedTime]" }
              rename => { "[serverTime]" => "[kv_field][serverTime]" }
              rename => { "[facility]" => "[kv_field][facility]" }
              rename => { "[customerId]" => "[kv_field][customerId]" }
              rename => { "[trapsId]" => "[kv_field][trapsId]" }
              rename => { "[serverHost]" => "[kv_field][serverHost]" }
              rename => { "[serverComponentVersion]" => "[kv_field][serverComponentVersion]" }
              rename => { "[regionId]" => "[kv_field][regionId]" }
              rename => { "[isEndpoint]" => "[kv_field][isEndpoint]" }
              rename => { "[severity]" => "[kv_field][severity]" }
              rename => { "[trapsSeverity]" => "[kv_field][trapsSeverity]" }
              rename => { "[messageCode]" => "[kv_field][messageCode]" }
              rename => { "[friendlyName]" => "[kv_field][friendlyName]" }
              rename => { "[msgTextEn]" => "[kv_field][msgTextEn]" }
              rename => { "[userFullName]" => "[kv_field][userFullName]" }
              rename => { "[userName]" => "[kv_field][userName]" }
              rename => { "[userRole]" => "[kv_field][userRole]" }
              rename => { "[userDomain]" => "[kv_field][userDomain]" }
              rename => { "[additionalData]" => "[kv_field][additionalData]" }
              rename => { "[messageCode2]" => "[kv_field][messageCode2]" }
              rename => { "[errorText]" => "[kv_field][errorText]" }
              rename => { "[errorData]" => "[kv_field][errorData]" }
              rename => { "[resultData]" => "[kv_field][resultData]" }
           }
#CSV formatted log do the parsing of the message (Analytics Logs)
        } else if ( [message] =~/(analytics)(\s)?,(\s)?(config)(\s)?,(.+),(\s)?(deviceManagement|distributionManagement|reportManagement|securityEventManagement|systemManagement)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(policy)(\s)?,(.+),(\s)?(exceptionManagement|policyManagement|profileManagement|sam)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) 
               or ( [message] =~/(analytics)(\s)?,(\s)?(agent_log)(\s)?,(.+),(\s)?(agentFlow)(\s)?,(.+)/ ) {
           csv {
              source => "message"
              skip_header => "true"
              columns => ["recordType", "class", "FUTURE_USE", "eventType", "eventCategory", "generatedTime", 
              "serverTime", "agentTime", "tzOffset", "FUTURE_USE", "facility", "customerId", "trapsId", "serverHost", 
              "serverComponentVersion", "regionId", "isEndpoint", "agentId", "osType", "isVdi", "osVersion", "is64", 
              "agentIp", "deviceName", "deviceDomain", "severity", "agentVersion", "contentVersion", 
              "protectionStatus", "sha256", "type", "parentSha256", "lastSeen", "fileName", "filePath", 
              "fileSize", "localAnalysisResult", "reported", "blocked", "executionCount"
              ]
           }
# Then, move fields to logx structure
           mutate {
              rename => { "[recordType]" => "[kv_field][recordType]" }
              rename => { "[class]" => "[kv_field][class]" }
              rename => { "[FUTURE_USE]" => "[kv_field][FUTURE_USE]" }
              rename => { "[eventType]" => "[kv_field][eventType]" }
              rename => { "[eventCategory]" => "[kv_field][eventCategory]" }
              rename => { "[generatedTime]" => "[kv_field][generatedTime]" }
              rename => { "[serverTime]" => "[kv_field][serverTime]" }
              rename => { "[agentTime]" => "[kv_field][agentTime]" }
              rename => { "[tzOffset]" => "[kv_field][tzOffset]" }
              rename => { "[facility]" => "[kv_field][facility]" }
              rename => { "[customerId]" => "[kv_field][customerId]" }
              rename => { "[trapsId]" => "[kv_field][trapsId]" }
              rename => { "[serverHost]" => "[kv_field][serverHost]" }
              rename => { "[serverComponentVersion]" => "[kv_field][serverComponentVersion]" }
              rename => { "[regionId]" => "[kv_field][regionId]" }
              rename => { "[isEndpoint]" => "[kv_field][isEndpoint]" }
              rename => { "[agentId]" => "[kv_field][agentId]" }
              rename => { "[osType]" => "[kv_field][osType]" }
              rename => { "[isVdi]" => "[kv_field][isVdi]" }
              rename => { "[osVersion]" => "[kv_field][osVersion]" }
              rename => { "[is64]" => "[kv_field][is64]" }
              rename => { "[agentIp]" => "[kv_field][agentIp]" }
              rename => { "[deviceName]" => "[kv_field][deviceName]" }
              rename => { "[deviceDomain]" => "[kv_field][deviceDomain]" }
              rename => { "[severity]" => "[kv_field][severity]" }
              rename => { "[agentVersion]" => "[kv_field][agentVersion]" }
              rename => { "[contentVersion]" => "[kv_field][contentVersion]" }
              rename => { "[protectionStatus]" => "[kv_field][protectionStatus]" }
              rename => { "[sha256]" => "[kv_field][sha256]" }
              rename => { "[type]" => "[kv_field][type]" }
              rename => { "[parentSha256]" => "[kv_field][parentSha256]" }
              rename => { "[lastSeen]" => "[kv_field][lastSeen]" }
              rename => { "[fileName]" => "[kv_field][fileName]" }
              rename => { "[filePath]" => "[kv_field][filePath]" }
              rename => { "[fileSize]" => "[kv_field][fileSize]" }
              rename => { "[localAnalysisResult]" => "[kv_field][localAnalysisResult]" }
              rename => { "[reported]" => "[kv_field][reported]" }
              rename => { "[blocked]" => "[kv_field][blocked]" }
              rename => { "[executionCount]" => "[kv_field][executionCount]" }
           }
#CSV formatted log do the parsing of the message (System Logs)
        } else if ( [message] =~/(system)(\s)?,(\s)?(system)(\s)?,(.+),(\s)?(licensing|provisioning|tenant|userAuthentication|workerProcessing)(\s)?,(.+)/ ) {
           csv {
              source => "message"
              skip_header => "true"
              columns => ["recordType", "class", "FUTURE_USE", "subClassId", "eventType", "eventCategory", 
                         "generatedTime", "serverTime", "FUTURE_USE", "facility", "customerId", "trapsId", "serverHost", 
                         "serverComponentVersion", "regionId", "isEndpoint", "agentId", "severity", "trapsSeverity", "messageCode", 
                         "friendlyName", "FUTURE_USE", "msgTextEn", "userFullName", "username", "userRole", "userDomain", 
                         "agentTime", "tzOffset", "osType", "isVdi", "osVersion", "is64", "agentIp", "deviceName", "deviceDomain", 
                         "agentVersion", "contentVersion", "protectionStatus", "userFullName2", "username2", "userRole2", "userDomain2", 
                         "messageName", "messageId", "processStatus", "errorText", "errorData", "resultData", "parameters", 
                         "additionalData"
              ]
           }
# Then, move fields to logx structure
           mutate {
              rename => { "[recordType]" => "[kv_field][recordType]" }
              rename => { "[class]" => "[kv_field][class]" }
              rename => { "[FUTURE_USE]" => "[kv_field][FUTURE_USE]" }
              rename => { "[subClassId]" => "[kv_field][subClassId]" }
              rename => { "[eventType]" => "[kv_field][eventType]" }
              rename => { "[eventCategory]" => "[kv_field][eventCategory]" }
              rename => { "[generatedTime]" => "[kv_field][generatedTime]" }
              rename => { "[serverTime]" => "[kv_field][serverTime]" }
              rename => { "[facility]" => "[kv_field][facility]" }
              rename => { "[customerId]" => "[kv_field][customerId]" }
              rename => { "[trapsId]" => "[kv_field][trapsId]" }
              rename => { "[serverHost]" => "[kv_field][serverHost]" }
              rename => { "[serverComponentVersion]" => "[kv_field][serverComponentVersion]" }
              rename => { "[regionId]" => "[kv_field][regionId]" }
              rename => { "[isEndpoint]" => "[kv_field][isEndpoint]" }
              rename => { "[agentId]" => "[kv_field][agentId]" }
              rename => { "[severity]" => "[kv_field][severity]" }
              rename => { "[trapsSeverity]" => "[kv_field][trapsSeverity]" }
              rename => { "[messageCode]" => "[kv_field][messageCode]" }
              rename => { "[friendlyName]" => "[kv_field][friendlyName]" }
              rename => { "[msgTextEn]" => "[kv_field][msgTextEn]" }
              rename => { "[userFullName]" => "[kv_field][userFullName]" }
              rename => { "[username]" => "[kv_field][username]" }
              rename => { "[userRole]" => "[kv_field][userRole]" }
              rename => { "[userDomain]" => "[kv_field][userDomain]" }
              rename => { "[agentTime]" => "[kv_field][agentTime]" }
              rename => { "[tzOffset]" => "[kv_field][tzOffset]" }
              rename => { "[osType]" => "[kv_field][osType]" }
              rename => { "[isVdi]" => "[kv_field][isVdi]" }
              rename => { "[osVersion]" => "[kv_field][osVersion]" }
              rename => { "[is64]" => "[kv_field][is64]" }
              rename => { "[agentIp]" => "[kv_field][agentIp]" }
              rename => { "[deviceName]" => "[kv_field][deviceName]" }
              rename => { "[deviceDomain]" => "[kv_field][deviceDomain]" }
              rename => { "[agentVersion]" => "[kv_field][agentVersion]" }
              rename => { "[contentVersion]" => "[kv_field][contentVersion]" }
              rename => { "[protectionStatus]" => "[kv_field][protectionStatus]" }
              rename => { "[userFullName2]" => "[kv_field][userFullName2]" }
              rename => { "[username2]" => "[kv_field][username2]" }
              rename => { "[userRole2]" => "[kv_field][userRole2]" }
              rename => { "[userDomain2]" => "[kv_field][userDomain2]" }
              rename => { "[messageName]" => "[kv_field][messageName]" }
              rename => { "[messageId]" => "[kv_field][messageId]" }
              rename => { "[processStatus]" => "[kv_field][processStatus]" }
              rename => { "[errorText]" => "[kv_field][errorText]" }
              rename => { "[errorData]" => "[kv_field][errorData]" }
              rename => { "[resultData]" => "[kv_field][resultData]" }
              rename => { "[parameters]" => "[kv_field][parameters]" }
              rename => { "[additionalData]" => "[kv_field][additionalData]" }
              
           }

        }
        if ("CEF:" in [message] ) {
#......................................................................#
#Logs have different structure according to CORTEX XDR Log Types, so first, define Log Type
#Using grok to parse components of the cef_message
#......................................................................#

          if ([cef_or_leef_msg_all]){
              grok {
               match => {
                 "cef_or_leef_msg_all" => [
                    "\|%{DATA:embDeviceVendor}\|%{DATA:embDeviceProduct}\|%{DATA:embDeviceVersion}\|%{DATA:embDeviceEventClass}\|%{DATA:act_msg}\|%{DATA:severity}\|%{GREEDYDATA:cef_or_leef_msg}"
                  ]
               }
              }

#......................................................................#
#Using grok to parse individual fields 
             grok { match => { "cef_or_leef_msg" => ["act=%{DATA:act} %{WORD}=","act=%{GREEDYDATA:act}"] } }
             grok { match => { "cef_or_leef_msg" => ["cat=%{DATA:cat} %{WORD}=","cat=%{GREEDYDATA:cat}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs1=%{DATA:cs1} %{WORD}=","cs1=%{GREEDYDATA:cs1}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs1Label=%{DATA:cs1Label} %{WORD}=","cs1Label=%{GREEDYDATA:cs1Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs2=%{DATA:cs2} %{WORD}=","cs2=%{GREEDYDATA:cs2}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs2Label=%{DATA:cs2Label} %{WORD}=","cs2Label=%{GREEDYDATA:cs2Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs3=%{DATA:cs3} %{WORD}=","cs3=%{GREEDYDATA:cs3}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs3Label=%{DATA:cs3Label} %{WORD}=","cs3Label=%{GREEDYDATA:cs3Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs4=%{DATA:cs4} %{WORD}=","cs4=%{GREEDYDATA:cs4}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs4Label=%{DATA:cs4Label} %{WORD}=","cs4Label=%{GREEDYDATA:cs4Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs5=%{DATA:cs5} %{WORD}=","cs5=%{GREEDYDATA:cs5}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs5Label=%{DATA:cs5Label} %{WORD}=","cs5Label=%{GREEDYDATA:cs5Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs6=%{DATA:cs6} %{WORD}=","cs6=%{GREEDYDATA:cs6}"] } }
             grok { match => { "cef_or_leef_msg" => ["cs6Label=%{DATA:cs6Label} %{WORD}=","cs6Label=%{GREEDYDATA:cs6Label}"] } }
             grok { match => { "cef_or_leef_msg" => ["CSPaccountname=%{DATA:CSPaccountname} %{WORD}=","CSPaccountname=%{GREEDYDATA:CSPaccountname}"] } }
             grok { match => { "cef_or_leef_msg" => ["deviceFacility=%{DATA:deviceFacility} %{WORD}=","deviceFacility=%{GREEDYDATA:deviceFacility}"] } }
             grok { match => { "cef_or_leef_msg" => ["dpt=%{DATA:dpt} %{WORD}=","dpt=%{GREEDYDATA:dpt}"] } }
             grok { match => { "cef_or_leef_msg" => ["dst=%{DATA:dst} %{WORD}=","dst=%{GREEDYDATA:dst}"] } }
             grok { match => { "cef_or_leef_msg" => ["dvchost=%{DATA:dvchost} %{WORD}=","dvchost=%{GREEDYDATA:dvchost}"] } }
             grok { match => { "cef_or_leef_msg" => ["end=%{DATA:end} %{WORD}=","end=%{GREEDYDATA:end}"] } }
             grok { match => { "cef_or_leef_msg" => ["externalId=%{DATA:externalId} %{WORD}=","externalId=%{GREEDYDATA:externalId}"] } }
             grok { match => { "cef_or_leef_msg" => ["fileHash=%{DATA:fileHash} %{WORD}=","fileHash=%{GREEDYDATA:fileHash}"] } }
             grok { match => { "cef_or_leef_msg" => ["filePath=%{DATA:filePath} %{WORD}=","filePath=%{GREEDYDATA:filePath}"] } }
             grok { match => { "cef_or_leef_msg" => ["incident=%{DATA:incident} %{WORD}=","incident=%{GREEDYDATA:incident}"] } }
             grok { match => { "cef_or_leef_msg" => ["initiatorPath=%{DATA:initiatorPath} %{WORD}=","initiatorPath=%{GREEDYDATA:initiatorPath}"] } }
             grok { match => { "cef_or_leef_msg" => ["initiatorSha256=%{DATA:initiatorSha256} %{WORD}=","initiatorSha256=%{GREEDYDATA:initiatorSha256}"] } }
             grok { match => { "cef_or_leef_msg" => ["msg=%{DATA:msg} %{WORD}=","msg=%{GREEDYDATA:msg}"] } }
             grok { match => { "cef_or_leef_msg" => ["osParentCmd=%{DATA:osParentCmd} %{WORD}=","osParentCmd=%{GREEDYDATA:osParentCmd}"] } }
             grok { match => { "cef_or_leef_msg" => ["osParentName=%{DATA:osParentName} %{WORD}=","osParentName=%{GREEDYDATA:osParentName}"] } }
             grok { match => { "cef_or_leef_msg" => ["osParentSha256=%{DATA:osParentSha256} %{WORD}=","osParentSha256=%{GREEDYDATA:osParentSha256}"] } }
             grok { match => { "cef_or_leef_msg" => ["osParentSignature=%{DATA:osParentSignature} %{WORD}=","osParentSignature=%{GREEDYDATA:osParentSignature}"] } }
             grok { match => { "cef_or_leef_msg" => ["osParentSigner=%{DATA:osParentSigner} %{WORD}=","osParentSigner=%{GREEDYDATA:osParentSigner}"] } }
             grok { match => { "cef_or_leef_msg" => ["request=%{DATA:request} %{WORD}=","request=%{GREEDYDATA:request}"] } }
             grok { match => { "cef_or_leef_msg" => ["rt=%{DATA:rt} %{WORD}=","rt=%{GREEDYDATA:rt}"] } }
             grok { match => { "cef_or_leef_msg" => ["shost=%{DATA:shost} %{WORD}=","shost=%{GREEDYDATA:shost}"] } }
             grok { match => { "cef_or_leef_msg" => ["spt=%{DATA:spt} %{WORD}=","spt=%{GREEDYDATA:spt}"] } }
             grok { match => { "cef_or_leef_msg" => ["src=%{DATA:src} %{WORD}=","src=%{GREEDYDATA:src}"] } }
             grok { match => { "cef_or_leef_msg" => ["suser=%{DATA:suser} %{WORD}=","suser=%{GREEDYDATA:suser}"] } }
             grok { match => { "cef_or_leef_msg" => ["targetprocesssignature=%{DATA:targetprocesssignature} %{WORD}=","targetprocesssignature=%{GREEDYDATA:targetprocesssignature}"] } }
             grok { match => { "cef_or_leef_msg" => ["tenantCDLid=%{DATA:tenantCDLid} %{WORD}=","tenantCDLid=%{GREEDYDATA:tenantCDLid}"] } }
             grok { match => { "cef_or_leef_msg" => ["tenantname=%{DATA:tenantname} %{WORD}=","tenantname=%{GREEDYDATA:tenantname}"] } }

        #......................................................................# 
        #First, replace whitespaces with default string after = to avoid issues, example:

            mutate {
              gsub => [
                "cef_or_leef_msg", "(\w+)= ", "\1=X0X "
              ]
            }
            mutate {
         #Rename fields (individual groks)
              rename => { "[act]" => "[kv_field][act]" }
              rename => { "[cat]" => "[kv_field][cat]" }
              rename => { "[cs1]" => "[kv_field][cs1]" }
              rename => { "[cs1Label]" => "[kv_field][cs1Label]" }
              rename => { "[cs2]" => "[kv_field][cs2]" }
              rename => { "[cs2Label]" => "[kv_field][cs2Label]" }
              rename => { "[cs3]" => "[kv_field][cs3]" }
              rename => { "[cs3Label]" => "[kv_field][cs3Label]" }
              rename => { "[cs4]" => "[kv_field][cs4]" }
              rename => { "[cs4Label]" => "[kv_field][cs4Label]" }
              rename => { "[cs5]" => "[kv_field][cs5]" }
              rename => { "[cs5Label]" => "[kv_field][cs5Label]" }
              rename => { "[cs6]" => "[kv_field][cs6]" }
              rename => { "[cs6Label]" => "[kv_field][cs6Label]" }
              rename => { "[CSPaccountname]" => "[kv_field][CSPaccountname]" }
              rename => { "[deviceFacility]" => "[kv_field][deviceFacility]" }
              rename => { "[dpt]" => "[kv_field][dpt]" }
              rename => { "[dst]" => "[kv_field][dst]" }
              rename => { "[dvchost]" => "[kv_field][dvchost]" }
              rename => { "[end]" => "[kv_field][end]" }
              rename => { "[externalId]" => "[kv_field][externalId]" }
              rename => { "[fileHash]" => "[kv_field][fileHash]" }
              rename => { "[filePath]" => "[kv_field][filePath]" }
              rename => { "[incident]" => "[kv_field][incident]" }
              rename => { "[initiatorPath]" => "[kv_field][initiatorPath]" }
              rename => { "[initiatorSha256]" => "[kv_field][initiatorSha256]" }
              rename => { "[msg]" => "[kv_field][msg]" }
              rename => { "[osParentCmd]" => "[kv_field][osParentCmd]" }
              rename => { "[osParentName]" => "[kv_field][osParentName]" }
              rename => { "[osParentSha256]" => "[kv_field][osParentSha256]" }
              rename => { "[osParentSignature]" => "[kv_field][osParentSignature]" }
              rename => { "[osParentSigner]" => "[kv_field][osParentSigner]" }
              rename => { "[request]" => "[kv_field][request]" }
              rename => { "[rt]" => "[kv_field][rt]" }
              rename => { "[shost]" => "[kv_field][shost]" }
              rename => { "[spt]" => "[kv_field][spt]" }
              rename => { "[src]" => "[kv_field][src]" }
              rename => { "[suser]" => "[kv_field][suser]" }
              rename => { "[targetprocesssignature]" => "[kv_field][targetprocesssignature]" }
              rename => { "[tenantCDLid]" => "[kv_field][tenantCDLid]" }
              rename => { "[tenantname]" => "[kv_field][tenantname]" }
            }
          }
        }
#......................................................................#
#Add standard fields to the tree structure
#......................................................................#
        mutate {
          #Rename the fileds
          rename => { "[embDeviceVendor]" => "[kv_field][embDeviceVendor]" }
          rename => { "[embDeviceProduct]" => "[kv_field][embDeviceProduct]" }
          rename => { "[format_version]" => "[kv_field][format_version]" }
          rename => { "[format_type]" => "[kv_field][format_type]" }
          rename => { "[embDeviceVersion]" => "[kv_field][embDeviceVersion]" }
          rename => { "[priority]" => "[kv_field][priority]" }
          rename => { "[severity]" => "[kv_field][severity]" }
          rename => { "[embDeviceEventClass]" => "[kv_field][embDeviceEventClass]" }
          rename => { "[act_msg]" => "[kv_field][act_msg]" }
          rename => { "[message]" => "[kv_field][message]" }
        }

#......................................................................#
#Correlation standard fields
#......................................................................#
    #src can be in multiple fields
    if [kv_field][src] {
        mutate {
          rename => { "[kv_field][src]" => "[kv_field][src_ip]" }
        }
    }

        mutate {
          rename => { "[kv_field][dst]" => "[kv_field][dest_ip]" }
          rename => { "[kv_field][spt]" => "[kv_field][src_port]" }
          rename => { "[kv_field][dpt]" => "[kv_field][dest_port]" }
        }

#......................................................................#
#Set null the fields with de X0X value (default string for null), and replace simple and double quotation
#also generate logx tree structure dynamically
          if [kv_field] {
            ruby {
                code => '
                    event.get("[kv_field]").each do |k, v|
                          if (v == "X0X") 
                            event.set("[logx][paloalto_cortex_xdr][#{k}]",nil)
                          elsif (k=~/(\W)$/)
                              event.remove(k)
                          elsif !(v.kind_of?(Array))
                              new_v = v.to_s.gsub(/\"/, "")
                              new_v = new_v.gsub(/\'/, "")
                              event.set("[logx][paloalto_cortex_xdr][#{k}]",new_v)
                          else
                              event.set("[logx][paloalto_cortex_xdr][#{k}]",v)
                          end
                       end   
                    '
            }
          }
#......................................................................#
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","path","tags","type","syslog_version","kv_field",
      "not_defined","cef_or_leef_msg_all","cef_or_leef_msg","syslog_date_host",
      "irrelevant","init_msg","[logx][paloalto_cortex_xdr][FUTURE_USE]"]
   }
  }
 }
}
