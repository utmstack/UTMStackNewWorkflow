filter {
    
    split {
      field => "message"
      terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }

    
    # Filter version 2.0.1
    # If syslog format parse the structure
    
      if [message] {
        grok {
            match => {
                "message" => [

                    "%{GREEDYDATA:tsp} %{IPORHOST:h_h} %{USERNAME:l_u}: %{USERNAME:user}user%{LOGLEVEL:severity}CEF:%{WORD:cef}\W%{WORD:d} %{WORD:b}\W%{GREEDYDATA:message_text}filePath=%{GREEDYDATA:filePath} fileHash=%{GREEDYDATA:fileHash} cs1=%{DATA:cs1} cs2=%{GREEDYDATA:cs2}",
                    "%{GREEDYDATA:tsp} %{IPORHOST:h_h} %{USERNAME:l_u}: user%{WORD:severity}%{SPACE}CEF:%{WORD:cef}\W%{WORD:d} %{WORD:b}\W%{GREEDYDATA:message_text}cat=%{DATA:cat} src=%{IP:src_ip} requestMethod=%{DATA:requestMethod} requestClientApplication=%{DATA:requestClientApplication} act=%{DATA:act} proto=%{DATA:protocol} app=%{DATA:app} reason=%{GREEDYDATA:reason} spt=%{NUMBER:spt} request=%{GREEDYDATA:request}"
                ]
            }
        }
      }
    
 
     # Check if tecnology is Deceptive Bytes

     if ([d] and [b]) and ([d] == "Deceptive" and [b] == "Bytes"){
        mutate {
            add_field => {
            "dataType" => "deceptive-bytes"
            }
        }
        #Evaluates to the host variable if can not be calculated
        if ![dataSource] {
         mutate {
            rename => {
            "host" => "dataSource"
            }
         }
        }
        if [request] {
            mutate {
                rename => {
                    "request" => "[logx][deceptive_bytes][request]"
                }
            }
        }
        if [spt] {
            mutate {
                rename => {
                    "spt" => "[logx][deceptive_bytes][spt]"
                }
            }
        }
        if [reason] {
            mutate {
                rename => {
                    "reason" => "[logx][deceptive_bytes][reason]"
                }
            }
        }
        if [app] {
            mutate {
                rename => {
                    "app" => "[logx][deceptive_bytes][app]"
                }
            }
        }
        if [protocol] {
            mutate {
                rename => {
                    "protocol" => "[logx][deceptive_bytes][protocol]"
                }
            }
        }
        if [act] {
            mutate {
                rename => {
                    "act" => "[logx][deceptive_bytes][act]"
                }
            }
        }
        if [requestClientApplication] {
            mutate {
                rename => {
                    "requestClientApplication" => "[logx][deceptive_bytes][requestClientApplication]"
                }
            }
        }
        if [requestMethod] {
            mutate {
                rename => {
                    "requestMethod" => "[logx][deceptive_bytes][requestMethod]"
                }
            }
        }
        if [src_ip] {
            mutate {
                rename => {
                    "src_ip" => "[logx][deceptive_bytes][src_ip]"
                }
            }
        }
        if [cat] {
            mutate {
                rename => {
                    "cat" => "[logx][deceptive_bytes][cat]"
                }
            }
        }
        if [tegnology] {
            mutate {
                rename => {
                    "tegnology" => "[logx][deceptive_bytes][cs2]"
                }
            }
        }
        if [cs2]{
            mutate {
                rename => {
                    "cs2" => "[logx][deceptive_bytes][cs2]"
                }
            }
        }
        if [cs1]{
            mutate {
                rename => {
                    "cs1" => "[logx][deceptive_bytes][cs1]"
                }
            }
        }
        if [fileHash]{
            mutate {
                rename => {
                    "fileHash" => "[logx][deceptive_bytes][fileHash]"
                }
            }
        }
        if [filePath]{
            mutate {
                rename => {
                    "filePath" => "[logx][deceptive_bytes][filePath]"
                }
            }
        }
        if [message_text]{
            mutate {
                rename => {
                    "message_text" => "[logx][deceptive_bytes][message_text]"
                }
            }
        }
        if [cef]{
            mutate {
                rename => {
                    "cef" => "[logx][deceptive_bytes][cef]"
                }
            }
        }
        if [severity]{
            mutate {
                rename => {
                    "severity" => "[logx][deceptive_bytes][severityLabel]"
                }
            }
        }
        if [user]{
            mutate {
                rename => {
                    "user" => "[logx][deceptive_bytes][user]"
                }
            }
        }
        if [server]{
            mutate {
                rename => {
                    "server" => "[logx][deceptive_bytes][server]"
                }
            }
        }
        

        mutate {
            remove_field => ["@version","path","d","b","timestamp","tags","h_i","i_u","tsp","type"]
        }
    }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["original_log_message","headers"]
   }    
}
