filter {

# NIDS filter version 1.3.2
# Based on https://suricata.readthedocs.io/en/latest/output/eve/eve-json-format.html (latest 7.0.0) (april 2022)
# and real events log provided
# Support json format

    if [path] and [path] == "/var/log/suricata/eve.json" {
        if [message] {
          json { source => "message" }
        }
        if [event_type] and ([event_type] == "anomaly" or [event_type] == "tls" or [event_type] == "flow" 
        or [event_type] == "alert" or [event_type] == "dns" or [event_type] == "ssh" 
        or [event_type] == "http" or [event_type] == "ftp" or [event_type] == "ftp_data" 
        or [event_type] == "tftp" or [event_type] == "smb" or [event_type] == "initial_request" 
        or [event_type] == "initial_response" or [event_type] == "connect_request" or [event_type] == "connect_response" 
        or [event_type] == "tls_handshake" or [rdp] or [event_type] == "rfb" or [event_type] == "mqtt" 
        or [event_type] == "http2" or [event_type] == "pgsql" or [event_type] == "ike" 
        or [event_type] == "ikev1" or [event_type] == "ikev2" 
        or [event_type] == "modbus" or [event_type] == "quic" or [event_type] == "snmp" 
        or [event_type] == "fileinfo" or [event_type] == "sip" or [event_type] == "dhcp") {
            mutate {
                rename => ["dest_ip", "[logx][nids][dest_ip]"]
                rename => ["dest_port", "[logx][nids][dest_port]"]
                rename => ["flow_id", "[logx][nids][flow_id]"]
                rename => ["host", "[logx][nids][host]"]
                rename => ["in_iface", "[logx][nids][in_iface]"]
                rename => ["proto", "[logx][nids][proto]"]
                rename => ["src_ip", "[logx][nids][src_ip]"]
                rename => ["src_port", "[logx][nids][src_port]"]
                rename => ["tx_id", "[logx][nids][tx_id]"]
            }
        }
        mutate {
            add_field => {
                "dataType" => "nids"
            }
            add_field => {
                "dataSource" => "nids"
            }
            remove_field => [ "timestamp", "type", "path"]
            rename => ["event_type", "[logx][nids][event_type]"]
        }
        if [tls] {
            mutate {
                rename => ["tls", "[logx][nids][tls]"]
            }
        }
        if [ssh] {
            mutate {
                rename => ["ssh", "[logx][nids][ssh]"]
            }
        }
        if [stats] {
            mutate {
                rename => ["stats", "[logx][nids][stats]"]
            }
        }
        if [flow] {
            mutate {
                rename => ["flow", "[logx][nids][flow]"]
            }
        }
        if [tcp] {
            mutate {
                rename => ["tcp", "[logx][nids][tcp]"]
            }
        }
        if [dns] {
            mutate {
                rename => ["dns", "[logx][nids][dns]"]
            }
        }
        if [app_proto] {
            mutate {
                rename => ["app_proto", "[logx][nids][app_proto]"]
            }
        }
        if [anomaly] {
            mutate {
                rename => ["anomaly", "[logx][nids][anomaly]"]
            }
        }
        if [alert] {
            mutate {
                rename => ["alert", "[logx][nids][alert]"]
            }
          if [logx][nids][alert][severity] {
            if [logx][nids][alert][severity] >= 3 {
                mutate {
                    add_field => {
                        "[logx][nids][severity_label]" => "Low"
                        "[logx][nids][severity]" => 1
                    }
                }
            }
            if [logx][nids][alert][severity] == 2 {
                mutate {
                    add_field => {
                        "[logx][nids][severity_label]" => "Medium"
                        "[logx][nids][severity]" => 2
                    }
                }
            }
            if [logx][nids][alert][severity] == 1 {
                mutate {
                    add_field => {
                        "[logx][nids][severity_label]" => "High"
                        "[logx][nids][severity]" => 3
                    }
                }
            }
            mutate {
                remove_field => [ "[logx][nids][alert][severity]" ]
            }
          }
        }
#.......................................................................
# Add new event_types to logx structure, detected in real logs, present in suricata 7.0.0

            mutate {
                rename => ["http", "[logx][nids][http]"]
                rename => ["ftp", "[logx][nids][ftp]"]
                rename => ["ftp_data", "[logx][nids][ftp_data]"]
                rename => ["tftp", "[logx][nids][tftp]"]
                rename => ["smb", "[logx][nids][smb]"]

                # RDP event_type
                rename => ["rdp", "[logx][nids][rdp]"]
                # End RDP event_type

                rename => ["rfb", "[logx][nids][rfb]"]
                rename => ["mqtt", "[logx][nids][mqtt]"]
                rename => ["http2", "[logx][nids][http2]"]
                rename => ["pgsql", "[logx][nids][pgsql]"]
                rename => ["ike", "[logx][nids][ike]"]
                rename => ["ikev1", "[logx][nids][ike]"]
                rename => ["ikev2", "[logx][nids][ike]"]
                rename => ["modbus", "[logx][nids][modbus]"]
                rename => ["quic", "[logx][nids][quic]"]

                # New fields from real logs, not present in suricata docs
                rename => ["snmp", "[logx][nids][snmp]"]
                rename => ["fileinfo", "[logx][nids][fileinfo]"]
                rename => ["sip", "[logx][nids][sip]"]
                rename => ["dhcp", "[logx][nids][dhcp]"]

                # This field isnt an event_type but appear in alert real logs
                rename => ["files", "[logx][nids][alert][files]"]
            }

#.......................................................................
# Add fields to logx structure, detected outside th event_type, present in suricata 7.0.0
        if [logx][nids][event_type] == "mqtt" {
            mutate {
                rename => ["pcap_cnt", "[logx][nids][mqtt][pcap_cnt]"]
            }
        } else if [logx][nids][event_type] == "pgsql" {
            mutate {
                rename => ["pcap_cnt", "[logx][nids][pgsql][pcap_cnt]"]
            }
        } else if [logx][nids][event_type] == "fileinfo" {
            if [logx][nids][http] {
              mutate {
                  rename => ["fileinfo", "[logx][nids][http][fileinfo]"]
              }
            } else if [logx][nids][http2] {
              mutate {
                  rename => ["fileinfo", "[logx][nids][http2][fileinfo]"]
              }
            } else {
              mutate {
                  rename => ["fileinfo", "[logx][nids][fileinfo]"]
              }
            }
        } else if [logx][nids][event_type] == "anomaly" {
            mutate {
                rename => ["pcap_cnt", "[logx][nids][anomaly][pcap_cnt]"]
                rename => ["packet", "[logx][nids][anomaly][packet]"]
                rename => ["packet_info", "[logx][nids][anomaly][packet_info]"]
            }
        } else if [logx][nids][event_type] == "flow" {
            mutate {
                rename => ["icmp_type", "[logx][nids][flow][icmp_type]"]
                rename => ["icmp_code", "[logx][nids][flow][icmp_code]"]
                rename => ["response_icmp_code", "[logx][nids][flow][response_icmp_code]"]
                rename => ["response_icmp_type", "[logx][nids][flow][response_icmp_type]"]
            }
        }

#.......................................................................
# Implementing logx.utm.action field used for established connections
        if [logx][nids][event_type] == "tls" {
           if ![logx][nids][tls][session_resumed] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "dns" {
          if [logx][nids][dns][type] and [logx][nids][dns][type] == "answer" {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "flow" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][flow][bytes_toserver] and [logx][nids][flow][bytes_toserver] > 0) and 
          ([logx][nids][flow][bytes_toclient] and [logx][nids][flow][bytes_toclient] > 0) {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "ssh" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          [logx][nids][ssh][server] and [logx][nids][ssh][client] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "alert" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and [logx][nids][alert][action] == "allowed" and 
          ([logx][nids][flow][bytes_toserver] and [logx][nids][flow][bytes_toserver] > 0) and 
          ([logx][nids][flow][bytes_toclient] and [logx][nids][flow][bytes_toclient] > 0) {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "http" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and [logx][nids][http][status] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "ftp" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and [logx][nids][ftp][completion_code] {
              ruby {
                code => "
                    event.get('[logx][nids][ftp][completion_code]').each_with_index do |value,key|
                        if value =~ /(2\d\d)|(125)/
                        	event.set('[logx][utm][action]', 'Success')
                        end
                    end
                    "
                }
           }
        } else if [logx][nids][event_type] == "tftp" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][tftp][packet] and [logx][nids][tftp][packet] != "error") {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "smb" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ( [logx][nids][smb][command] and "NEGOTIATE" in [logx][nids][smb][command] ) and 
          [logx][nids][smb][status] and ( "SUCCESS" in [logx][nids][smb][status] or 
          "GRANTED" in [logx][nids][smb][status] or "CONNECTED" in [logx][nids][smb][status]) {
               mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "rdp" 
        or ([logx][nids][rdp][event_type] and ([logx][nids][rdp][event_type] == "initial_response"  
        or [logx][nids][rdp][event_type] == "initial_request" or [logx][nids][rdp][event_type] == "connect_request" 
        or [logx][nids][rdp][event_type] == "connect_response" or [logx][nids][rdp][event_type] == "tls_handshake") ) {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][rdp][event_type] == "connect_response" or [logx][nids][rdp][event_type] == "tls_handshake") {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "rfb" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][rfb][authentication][security-result] and [logx][nids][rfb][authentication][security-result] == "OK") {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "mqtt" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][mqtt][connack][return_code] and 
          ([logx][nids][mqtt][connack][return_code] == 0 or [logx][nids][mqtt][connack][return_code] == "0x00")) {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "http2" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][http2][response][headers] ) {
            ruby {
                code => "
                    event.get('[logx][nids][http2][response][headers]').each_with_index do |value,key|
                        if (value['name'] == 'status' or value['name'] == ':status') 
                        	event.set('[logx][utm][action]', 'Success')
                        end
                    end
                    "
            }
           }
        } else if [logx][nids][event_type] == "pgsql" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][pgsql][request][simple_query] or [logx][nids][pgsql][response][command_completed] or 
          ([logx][nids][pgsql][response][ssl_accepted] and [logx][nids][pgsql][response][ssl_accepted] == "true") or 
          ([logx][nids][pgsql][response][accepted] and [logx][nids][pgsql][response][accepted] == "true") or 
          [logx][nids][pgsql][response][authentication_md5_password] ) {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "ike" or [logx][nids][event_type] == "ikev1" or [logx][nids][event_type] == "ikev2" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "modbus" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "sip" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "quic" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "fileinfo" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "snmp" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        } else if [logx][nids][event_type] == "dhcp" {
          if [logx][nids][src_ip] and [logx][nids][dest_ip] and 
          ([logx][nids][dhcp][assigned_ip] and [logx][nids][dhcp][assigned_ip] != "0") {
                mutate {
                  add_field => { "[logx][utm][action]" => "Success" }
                }
           }
        }
    }
}
