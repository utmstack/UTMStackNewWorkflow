filter {
    # CheckPoint filter version 2.0.0

    split {
     field => "message"
     terminator => "<utm-log-separator>"
    }
    
    if ![dataType] {
        #First, define the entry point
        if [message] and ([message]=~/ CheckPoint \d+ - \[(.+)\]/){
            
            #......................................................................# 
            #Generating dataType and dataSource field required by CurrelationRulesEngine
            if (![dataSource]){
              mutate {
               add_field => { "dataSource" => "%{host}" }
              }
           }

            mutate {
                add_field => { "dataType" => "antivirus-checkpoint" }
            }
            
            #......................................................................#
            #Using grok to parse header of the message
            grok {
                match => {
                    "message" => "(%{INT:not_defined})?(\s)?(<%{NUMBER:priority}>)?(%{INT:syslog_version})? %{DATA:syslog_time} %{DATA:syslog_host} %{DATA:syslog_app} %{INT:pid} - \[%{GREEDYDATA:json_msg}; \]"
                }
            }

            #......................................................................#
            #Checking that the json_msg field exists
            if ([json_msg]){
                
                #Checking json_msg field
                if [json_msg]=~/\w+:\"[A-Za-z0-9.:,;_=@&\/\{\}\[\]\s\\\-]+\"/{
                    mutate {
                        gsub => ["json_msg", ':"(.*?)"', ':""\1""']
                    }
                }
                    #Converting to a valid json structure
                mutate {
                    gsub => ["json_msg", '"" ""', '""X0X""']
                    gsub => ["json_msg", '(.+)""', '{"\1"}']
                    gsub => ["json_msg", ':"<', ':""<']
                    gsub => ["json_msg", '""; ', '","']
                    gsub => ["json_msg", ':""', '":"']
                    gsub => ["json_msg", '\[', ';']
                    gsub => ["json_msg", '\\]', '']
                }
                #Parsing json structure
                json {
                    source => "json_msg"
                    target => "[json_fields]"
                }
            }
            
            #......................................................................#
            #Adding all fields to json tree structure
            mutate {
                rename => { "syslog_app" => "[json_fields][syslog_app]" }
                rename => { "syslog_time" => "[json_fields][syslog_time]" }
                rename => { "pid" => "[json_fields][pid]" }
                rename => { "syslog_host" => "[json_fields][syslog_host]" }
                rename => { "priority" => "[json_fields][priority]" }
            }

            #......................................................................#
            #Removing fields with empty values
            if [json_fields] {  
                ruby {
                    code => '
                        event.get("[json_fields]").each do |k, v|
                            if (v != "X0X") 
                                event.set("[logx][checkpoint][#{k}]",v)
                            end
                        end   
                        '
                }
            }

            if [logx][checkpoint][src]{
                mutate {
                    rename => { "[logx][checkpoint][src]" => "[logx][checkpoint][src_ip]"}
                }
            }
            if [logx][checkpoint][__policy_id_tag]{
                
                #Converting to a valid kv structure
                mutate {
                    gsub => ["[logx][checkpoint][__policy_id_tag]", ';', ' ']
                }

                #......................................................................#
                #Using the kv filter with default config, usefull in key-value logs
                kv { 
                    source => "[logx][checkpoint][__policy_id_tag]" 
                    allow_duplicate_values => false
                    target => "[logx][checkpoint][policy_id_tag]"
                }

                #......................................................................#
                #Remove fields that have issues with kv filter (spaces or = in value)
                mutate {
                    remove_field => ["[logx][checkpoint][policy_id_tag][mgmt]","[logx][checkpoint][policy_id_tag][policy_name]"]
                }
                #......................................................................#
                #Using grok to parse kv issued fields
                grok {
                    match => {"[logx][checkpoint][__policy_id_tag]" => [
                        "mgmt=%{DATA:[logx][checkpoint][policy_id_tag][mgmt]} %{WORD}=",
                        "mgmt=%{GREEDYDATA:[logx][checkpoint][policy_id_tag][mgmt]}"
                        ]
                    }
                }
                grok {
                    match => {"[logx][checkpoint][__policy_id_tag]" => [
                        "policy_name=%{DATA:[logx][checkpoint][policy_id_tag][policy_name]} %{WORD}=",
                        "policy_name=%{GREEDYDATA:[logx][checkpoint][policy_id_tag][policy_name]}"
                        ]
                    }
                }

                mutate {
                    remove_field => ["[logx][checkpoint][__policy_id_tag]"]
                }
            }
            
            #......................................................................#
            #Finally, remove unnecessary fields
            mutate {
                remove_field => ["@version","timestamp","path","type","syslog_version",
                "not_defined","msg_all","irrelevant", "json_msg", "json_fields"]
            }
        } 
    }
}