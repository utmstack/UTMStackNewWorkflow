filter {

# SonicWall filter version 2.0.1
# Support Syslog CEF format
# Based in https://www.sonicwall.com/techdocs/pdf/sonicos-6-5-4-log-events-reference-guide.pdf
# and https://docs.elastic.co/integrations/sonicwall_firewall
# and https://www.ossec.net/docs/log_samples/firewalls/sonicwall.html
# and https://docs.trellix.com/es-ES/bundle/enterprise-security-manager-data-sources-configuration-reference-guide/page/GUID-AE747DCA-9D60-4148-A97D-B6D3AE581AD7.html
# and http://docs.ospatrol.com/en/latest/log_samples/firewalls/sonicwall.html
# and https://documentation.cysiv.com/articles/#!data-source-onboarding-device-configuration-reference/sonicwall-reference-information-and-cim-field-mapping

    split {
     field => "message"
     terminator => "<utm-log-separator>"
    }

    #Looking for datasource generated by an agent and parse original message
    if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
      grok {
        match => {
          "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
        }
      }
    }
    if [original_log_message] {
      mutate {
        update => { "message" => "%{[original_log_message]}" }
      }
    }
    
    if ![dataType] {
        #First,search to define the entry point contain id= and sn= and fw= and time= or CEF
        if (([message] and [message] =~/\bid=\b(.+)\bsn=\b/ and [message] =~/\bfw=\b/ and [message] =~/\btime=/)
        or ("CEF:" in [message] and [message] =~/\|(\w+)?(\s)?SonicWall(\s)?(\w+)?\|/)){
          #......................................................................#
          #Generating dataSource field required by CorrelationRulesEngine
          #Checks if exists, if not evaluate to the host variable
          if (![dataSource]){
            mutate {
              add_field => { "dataSource" => "%{host}" }
            }
          }
          #......................................................................# 
          #Generating dataType field required by CorrelationRulesEngine
          mutate {
            add_field => { "dataType" => "firewall-sonicwall" }
          }
          #Checking if the log is in syslog format
          if ([message] =~/\bid=\b(.+)\bsn=\b/ and [message] =~/\bfw=\b/ and [message] =~/\btime=/){
            #......................................................................#
            #Using grok to parse header of the message
            grok {
            match => {
              "message" => [
                 "(%{INT:not_defined})?(\s)?(<%{NUMBER:priority}>)?(%{INT:syslog_version})?(%{DATA:syslog_date_host})?id=%{WORD:id} %{GREEDYDATA:msg_all}"
              ]
            }
          }
          }
          #Checking if the log is in CEF format
          if ("CEF:" in [message] and [message] =~/\|(\w+)?(\s)?SonicWall(\s)?(\w+)?\|/){
            #......................................................................#
            #Using grok to parse header of the message
            grok {
              match => {
                "message" => [
                  "(%{INT:not_defined})?(\s)?(<%{NUMBER:priority}>)?(%{INT:syslog_version})?(\s)?%{GREEDYDATA:syslog_date_host} CEF:(\s)?%{INT:cef_version}%{GREEDYDATA:cef_msg_all}"
                ]
              }
            }
            #......................................................................#
            #Checking that the cef_msg_all field exists and using grok to parse cef_msg_all
            if ([cef_msg_all]){
              grok {
                match => {
                  "cef_msg_all" => [
                    "\|%{DATA:dvc_vendor}\|%{DATA:dvc_product}\|%{DATA:dvc_version}\|%{INT:event_id}\|%{DATA:event_name}\|%{INT:severity}\|%{GREEDYDATA:msg_all}"
                  ]
                }
              }
            }
          }
          #......................................................................#
          #Checking that the msg_all field exists
          if ([msg_all]){
            #......................................................................#
            #Using grok to parse common msg_all field components in syslog format and CEF format
            grok { match => { "msg_all" => [" app=%{NUMBER:num_app_id} %{WORD:}="," app=%{GREEDYDATA:num_app_id}"] } }
            grok { match => { "msg_all" => [" appcat=%{DATA:app_cat} %{WORD:}="," appcat=%{GREEDYDATA:app_cat}"] } }
            grok { match => { "msg_all" => [" appid=%{DATA:appid} %{WORD:}="," appid=%{GREEDYDATA:appid}"] } }
            grok { match => { "msg_all" => [" arg=%{DATA:arg} %{WORD:}="," arg=%{GREEDYDATA:arg}"] } }
            grok { match => { "msg_all" => [" bcastRx=%{DATA:bcast_pkt_received} %{WORD:}="," bcastRx=%{GREEDYDATA:bcast_pkt_received}"] } }
            grok { match => { "msg_all" => [" bcastTx=%{DATA:bcast_pkt_transm} %{WORD:}="," bcastTx=%{GREEDYDATA:bcast_pkt_transm}"] } }
            grok { match => { "msg_all" => [" bid=%{NUMBER:blade_id} %{WORD:}="," bid=%{GREEDYDATA:blade_id}"] } }
            grok { match => { "msg_all" => [" bytesRx=%{DATA:bytes_rcvd} %{WORD:}="," bytesRx=%{GREEDYDATA:bytes_rcvd}"] } }
            grok { match => { "msg_all" => [" bytesTx=%{DATA:bytes_sent} %{WORD:}="," bytesTx=%{GREEDYDATA:bytes_sent}"] } }
            grok { match => { "msg_all" => [" [Cc]ategory=(\")?%{DATA:cfs_category}(\")? %{WORD:}="," [Cc]ategory=%{GREEDYDATA:cfs_category}"] } }
            grok { match => { "msg_all" => [" dpi=%{NUMBER:deep_packet_inspection} %{WORD:}="," dpi=%{GREEDYDATA:deep_packet_inspection}"] } }
            grok { match => { "msg_all" => [" dst=%{DATA:dst} %{WORD:}="," dst=%{GREEDYDATA:dst}"] } }
            grok { match => { "msg_all" => [" dstname=%{DATA:request} %{WORD:}="," dstname=%{GREEDYDATA:request}"] } }
            grok { match => { "msg_all" => [" gcat=%{DATA:group_cat} %{WORD:}="," gcat=%{GREEDYDATA:group_cat}"] } }
            grok { match => { "msg_all" => [" goodRxBytes=%{DATA:good_bytes_received} %{WORD:}="," goodRxBytes=%{GREEDYDATA:good_bytes_received}"] } }
            grok { match => { "msg_all" => [" goodTxBytes=%{DATA:good_bytes_transm} %{WORD:}="," goodTxBytes=%{GREEDYDATA:good_bytes_transm}"] } }
            grok { match => { "msg_all" => [" if=%{DATA:interface_statistics_reported} %{WORD:}="," if=%{GREEDYDATA:interface_statistics_reported}"] } }
            grok { match => { "msg_all" => [" ipscat=(\")?%{DATA:ipscat}(\")? %{WORD:}="," ipscat=%{GREEDYDATA:ipscat}"] } }
            grok { match => { "msg_all" => [" ipspri=%{NUMBER:ipspri} %{WORD:}="," ipspri=%{GREEDYDATA:ipspri}"] } }
            grok { match => { "msg_all" => [" msg=(\")?%{DATA:msg}(\")? %{WORD:}="," msg=%{GREEDYDATA:msg}"] } }
            grok { match => { "msg_all" => [" mgmtip=%{DATA:mgmt_source_ip} %{WORD:}="," mgmtip=%{GREEDYDATA:mgmt_source_ip}"] } }
            grok { match => { "msg_all" => [" proto=%{DATA:protocol} %{WORD:}="," proto=%{GREEDYDATA:protocol}"] } }
            grok { match => { "msg_all" => [" radio=%{DATA:radio} %{WORD:}="," radio=%{GREEDYDATA:radio}"] } }
            grok { match => { "msg_all" => [" referer=(\")?%{DATA:referer}(\")? %{WORD:}="," referer=%{GREEDYDATA:referer}"] } }
            grok { match => { "msg_all" => [" sid=%{NUMBER:sid} %{WORD:}="," sid=%{GREEDYDATA:sid}"] } }
            grok { match => { "msg_all" => [" spycat=%{DATA:anti_spyware_cat} %{WORD:}="," spycat=%{GREEDYDATA:anti_spyware_cat}"] } }
            grok { match => { "msg_all" => [" spypri=%{DATA:anti_spyware_pri} %{WORD:}="," spypri=%{GREEDYDATA:anti_spyware_pri}"] } }
            grok { match => { "msg_all" => [" src=%{DATA:src} %{WORD:}="," src=%{GREEDYDATA:src}"] } }
            grok { match => { "msg_all" => [" station=%{DATA:station} %{WORD:}="," station=%{GREEDYDATA:station}"] } }
            grok { match => { "msg_all" => [" ucastRx=%{DATA:ucast_pkt_received} %{WORD:}="," ucastRx=%{GREEDYDATA:ucast_pkt_received}"] } }
            grok { match => { "msg_all" => [" ucastTx=%{DATA:ucast_pkt_transm} %{WORD:}="," ucastTx=%{GREEDYDATA:ucast_pkt_transm}"] } }

            #......................................................................#
            #Using grok to parse msg_all components from syslog format only
            grok { match => { "msg_all" => [" af_polid=%{NUMBER:af_policy_id} %{WORD:}="," af_polid=%{GREEDYDATA:af_policy_id}"] } }
            grok { match => { "msg_all" => [" af_policy=%{DATA:af_policy} %{WORD:}="," af_policy=%{GREEDYDATA:af_policy}"] } }
            grok { match => { "msg_all" => [" af_type=%{DATA:af_policy_type} %{WORD:}="," af_type=%{GREEDYDATA:af_policy_type}"] } }
            grok { match => { "msg_all" => [" af_service=%{WORD:af_policy_service} %{WORD:}="," af_service=%{GREEDYDATA:af_policy_service}"] } }
            grok { match => { "msg_all" => [" af_action=%{DATA:af_policy_action} %{WORD:}="," af_action=%{GREEDYDATA:af_policy_action}"] } }
            grok { match => { "msg_all" => [" af_object=%{DATA:af_policy_object} %{WORD:}="," af_object=%{GREEDYDATA:af_policy_object}"] } }
            grok { match => { "msg_all" => [" ai=%{NUMBER:active_interface} %{WORD:}="," ai=%{GREEDYDATA:active_interface}"] } }
            grok { match => { "msg_all" => [" appName=%{DATA:app_name} %{WORD:}="," appName=%{GREEDYDATA:app_name}"] } }
            grok { match => { "msg_all" => [" c=%{NUMBER:msg_category} %{WORD:}="," c=%{GREEDYDATA:msg_category}"] } }
            grok { match => { "msg_all" => [" catid=%{DATA:rule_category} %{WORD:}="," catid=%{GREEDYDATA:rule_category}"] } }
            grok { match => { "msg_all" => [" cdur=%{NUMBER:conn_duration} %{WORD:}="," cdur=%{GREEDYDATA:conn_duration}"] } }
            grok { match => { "msg_all" => [" change=%{DATA:change} %{WORD:}="," change=%{GREEDYDATA:change}"] } }
            grok { match => { "msg_all" => [" code=%{NUMBER:code} %{WORD:}="," code=%{GREEDYDATA:code}"] } }
            grok { match => { "msg_all" => [" conns=%{NUMBER:conns} %{WORD:}="," conns=%{GREEDYDATA:conns}"] } }
            grok { match => { "msg_all" => [" contentObject=%{DATA:contentObject} %{WORD:}="," contentObject=%{GREEDYDATA:contentObject}"] } }
            grok { match => { "msg_all" => [" icmpCode=%{DATA:icmpCode} %{WORD:}="," icmpCode=%{GREEDYDATA:icmpCode}"] } }
            grok { match => { "msg_all" => [" dstMac=%{DATA:dstMac} %{WORD:}="," dstMac=%{GREEDYDATA:dstMac}"] } }
            grok { match => { "msg_all" => [" dstV6=%{DATA:dstV6} %{WORD:}="," dstV6=%{GREEDYDATA:dstV6}"] } }
            grok { match => { "msg_all" => [" dstZone=%{DATA:dstZone} %{WORD:}="," dstZone=%{GREEDYDATA:dstZone}"] } }
            grok { match => { "msg_all" => [" dur=%{NUMBER:session_dur} %{WORD:}="," dur=%{GREEDYDATA:session_dur}"] } }
            grok { match => { "msg_all" => [" dyn=%{DATA:fw_status_report} %{WORD:}="," dyn=%{GREEDYDATA:fw_status_report}"] } }
            grok { match => { "msg_all" => [" f=%{NUMBER:flow_type} %{WORD:}="," f=%{GREEDYDATA:flow_type}"] } }
            grok { match => { "msg_all" => [" fileid=(\")?%{DATA:fileid}(\")? %{WORD:}="," fileid=%{GREEDYDATA:fileid}"] } }
            grok { match => { "msg_all" => [" filetxstatus=%{DATA:filetxstatus} %{WORD:}="," filetxstatus=%{GREEDYDATA:filetxstatus}"] } }
            grok { match => { "msg_all" => [" fw=%{DATA:fw_wan} %{WORD:}="," fw=%{GREEDYDATA:fw_wan}"] } }
            grok { match => { "msg_all" => [" fw_action=(\")?%{DATA:fw_action}(\")? %{WORD:}="," fw_action=%{GREEDYDATA:fw_action}"] } }
            grok { match => { "msg_all" => [" fwlan=%{DATA:fw_lan} %{WORD:}="," fwlan=%{GREEDYDATA:fw_lan}"] } }
            grok { match => { "msg_all" => [" i=%{NUMBER:interval} %{WORD:}="," i=%{GREEDYDATA:interval}"] } }
            grok { match => { "msg_all" => [" lic=%{NUMBER:lic} %{WORD:}="," lic=%{GREEDYDATA:lic}"] } }
            grok { match => { "msg_all" => [" m=%{NUMBER:event_id} %{WORD:}="," m=%{GREEDYDATA:event_id}"] } }
            grok { match => { "msg_all" => [" mailFrom=%{DATA:mailFrom} %{WORD:}="," mailFrom=%{GREEDYDATA:mailFrom}"] } }
            grok { match => { "msg_all" => [" n=%{NUMBER:msg_count} %{WORD:}="," n=%{GREEDYDATA:msg_count}"] } }
            grok { match => { "msg_all" => [" natDst=%{DATA:nat_dst} %{WORD:}="," natDst=%{GREEDYDATA:nat_dst}"] } }
            grok { match => { "msg_all" => [" natDstV6=%{DATA:nat_dst_v6} %{WORD:}="," natDstV6=%{GREEDYDATA:nat_dst_v6}"] } }
            grok { match => { "msg_all" => [" natSrc=%{DATA:nat_src} %{WORD:}="," natSrc=%{GREEDYDATA:nat_src}"] } }
            grok { match => { "msg_all" => [" natSrcV6=%{DATA:nat_src_v6} %{WORD:}="," natSrcV6=%{GREEDYDATA:nat_src_v6}"] } }
            grok { match => { "msg_all" => [" note=(\")?%{DATA:note}(\")? %{WORD:}="," note=%{GREEDYDATA:note}"] } }
            grok { match => { "msg_all" => [" npcs=%{DATA:npcs} %{WORD:}="," npcs=%{GREEDYDATA:npcs}"] } }
            grok { match => { "msg_all" => [" op=%{NUMBER:request_method} %{WORD:}="," op=%{GREEDYDATA:request_method}"] } }
            grok { match => { "msg_all" => [" packetdatId=%{DATA:packetdatId} %{WORD:}="," packetdatId=%{GREEDYDATA:packetdatId}"] } }
            grok { match => { "msg_all" => [" packetdatNum=%{DATA:packetdatNum} %{WORD:}="," packetdatNum=%{GREEDYDATA:packetdatNum}"] } }
            grok { match => { "msg_all" => [" packetdatEnc=%{DATA:packetdatEnc} %{WORD:}="," packetdatEnc=%{GREEDYDATA:packetdatEnc}"] } }
            grok { match => { "msg_all" => [" pri=%{NUMBER:severity} %{WORD:}="," pri=%{GREEDYDATA:severity}"] } }
            grok { match => { "msg_all" => [" pt=%{DATA:pt} %{WORD:}="," pt=%{GREEDYDATA:pt}"] } }
            grok { match => { "msg_all" => [" rcptTo=%{DATA:email_recipient} %{WORD:}="," rcptTo=%{GREEDYDATA:email_recipient}"] } }
            grok { match => { "msg_all" => [" rcvd=%{NUMBER:bytes_rcvd} %{WORD:}="," rcvd=%{GREEDYDATA:bytes_rcvd}"] } }
            grok { match => { "msg_all" => [" result=%{NUMBER:result_code} %{WORD:}="," result=%{GREEDYDATA:result_code}"] } }
            grok { match => { "msg_all" => [" rpkt=%{NUMBER:pkt_received} %{WORD:}="," rpkt=%{GREEDYDATA:pkt_received}"] } }
            grok { match => { "msg_all" => [" rule=(\")?%{DATA:rule}(\")? %{WORD:}="," rule=%{GREEDYDATA:rule}"] } }
            grok { match => { "msg_all" => [" sent=%{NUMBER:bytes_sent} %{WORD:}="," sent=%{GREEDYDATA:bytes_sent}"] } }
            grok { match => { "msg_all" => [" sess=%{DATA:sess} %{WORD:}="," sess=%{GREEDYDATA:sess}"] } }
            grok { match => { "msg_all" => ["(\s)?sn=%{WORD:serial_num} %{WORD:}=","(\s)?sn=%{GREEDYDATA:serial_num}"] } }
            grok { match => { "msg_all" => [" spkt=%{NUMBER:pkt_sent} %{WORD:}="," spkt=%{GREEDYDATA:pkt_sent}"] } }
            grok { match => { "msg_all" => [" srcMac=%{DATA:srcMac} %{WORD:}="," srcMac=%{GREEDYDATA:srcMac}"] } }
            grok { match => { "msg_all" => [" srcZone=%{DATA:srcZone} %{WORD:}="," srcZone=%{GREEDYDATA:srcZone}"] } }
            grok { match => { "msg_all" => [" time=(\")?%{DATA:time}(\")? %{WORD:}="," time=%{GREEDYDATA:time}"] } }
            grok { match => { "msg_all" => [" type=%{DATA:icmp_type} %{WORD:}="," type=%{GREEDYDATA:icmp_type}"] } }
            grok { match => { "msg_all" => [" unsynched=%{DATA:unsynched} %{WORD:}="," unsynched=%{GREEDYDATA:unsynched}"] } }
            grok { match => { "msg_all" => [" usestandbysa=%{NUMBER:usestandbysa} %{WORD:}="," usestandbysa=%{GREEDYDATA:usestandbysa}"] } }
            grok { match => { "msg_all" => [" (usr|user)=(\")?%{DATA:user}(\")? %{WORD:}="," (usr|user)=%{GREEDYDATA:user}"] } }
            grok { match => { "msg_all" => [" vpnpolicy=(\")?%{DATA:vpnpolicy}(\")? %{WORD:}="," vpnpolicy=%{GREEDYDATA:vpnpolicy}"] } }
            grok { match => { "msg_all" => [" vpnpolicyDst=(\")?%{DATA:vpnpolicyDst}(\")? %{WORD:}="," vpnpolicyDst=%{GREEDYDATA:vpnpolicyDst}"] } }

            #......................................................................#
            #Using grok to parse msg_all components from CEF format only
            grok { match => { "msg_all" => ["(\s)?cat=%{NUMBER:msg_category} %{WORD:}="] } }
            grok { match => { "msg_all" => [" cn3Label=%{NUMBER:conn_duration} %{WORD:}="," cn3Label=%{GREEDYDATA:conn_duration}"] } }
            grok { match => { "msg_all" => [" SWGMSchangeUrl=%{DATA:change} %{WORD:}="," SWGMSchangeUrl=%{GREEDYDATA:change}"] } }
            grok { match => { "msg_all" => [" reason=%{NUMBER:code} %{WORD:}="," reason=%{GREEDYDATA:code}"] } }
            grok { match => { "msg_all" => [" cn2=%{DATA:icmpCode} %{WORD:}="," cn2=%{GREEDYDATA:icmpCode}"] } }
            grok { match => { "msg_all" => [" cs4=%{DATA:interface_statistics} %{WORD:}="," cs4=%{GREEDYDATA:interface_statistics}"] } }
            grok { match => { "msg_all" => [" deviceOutboundInterface=%{DATA:device_outbound_interface} %{WORD:}="," deviceOutboundInterface=%{GREEDYDATA:device_outbound_interface}"] } }
            grok { match => { "msg_all" => [" deviceInboundInterface=%{DATA:device_inbound_interface} %{WORD:}="," deviceInboundInterface=%{GREEDYDATA:device_inbound_interface}"] } }
            grok { match => { "msg_all" => [" dpt=%{NUMBER:dest_port} %{WORD:}="," dpt=%{GREEDYDATA:dest_port}"] } }
            grok { match => { "msg_all" => [" dnpt=%{NUMBER:nat_dest_port} %{WORD:}="," dnpt=%{GREEDYDATA:nat_dest_port}"] } }
            grok { match => { "msg_all" => [" dmac=%{DATA:dstMac} %{WORD:}="," dmac=%{GREEDYDATA:dstMac}"] } }
            grok { match => { "msg_all" => [" request=%{DATA:request} %{WORD:}="," request=%{GREEDYDATA:request}"] } }
            grok { match => { "msg_all" => [" cs4Label=%{DATA:dstZone} %{WORD:}="," cs4Label=%{GREEDYDATA:dstZone}"] } }
            grok { match => { "msg_all" => [" cs6label=%{NUMBER:session_dur} %{WORD:}="," cs6label=%{GREEDYDATA:session_dur}"] } }
            grok { match => { "msg_all" => [" flowType=%{NUMBER:flow_type} %{WORD:}="," flowType=%{GREEDYDATA:flow_type}"] } }
            grok { match => { "msg_all" => [" cnt=%{NUMBER:msg_count} %{WORD:}="," cnt=%{GREEDYDATA:msg_count}"] } }
            grok { match => { "msg_all" => [" cs2Label=%{DATA:nat_dst} %{WORD:}="," cs2Label=%{GREEDYDATA:nat_dst}"] } }
            grok { match => { "msg_all" => [" cs1Label=%{DATA:nat_src} %{WORD:}="," cs1Label=%{GREEDYDATA:nat_src}"] } }
            grok { match => { "msg_all" => [" cs6=(\")?%{DATA:note}(\")? %{WORD:}="," cs6=%{GREEDYDATA:note}"] } }
            grok { match => { "msg_all" => [" cs5=%{DATA:npcs} %{WORD:}="," cs5=%{GREEDYDATA:npcs}"] } }
            grok { match => { "msg_all" => [" requestMethod=%{NUMBER:request_method} %{WORD:}="," requestMethod=%{GREEDYDATA:request_method}"] } }
            grok { match => { "msg_all" => [" in=%{NUMBER:bytes_rcvd} %{WORD:}="," in=%{GREEDYDATA:bytes_rcvd}"] } }
            grok { match => { "msg_all" => [" outcome=%{NUMBER:result_code} %{WORD:}="," outcome=%{GREEDYDATA:result_code}"] } }
            grok { match => { "msg_all" => [" cn1Label=%{NUMBER:pkt_received} %{WORD:}="," cn1Label=%{GREEDYDATA:pkt_received}"] } }
            grok { match => { "msg_all" => [" cs1=(\")?%{DATA:rule}(\")? %{WORD:}="," cs1=%{GREEDYDATA:rule}"] } }
            grok { match => { "msg_all" => [" out=%{NUMBER:bytes_sent} %{WORD:}="," out=%{GREEDYDATA:bytes_sent}"] } }
            grok { match => { "msg_all" => [" cs5Label=%{DATA:sess} %{WORD:}="," cs5Label=%{GREEDYDATA:sess}"] } }
            grok { match => { "msg_all" => [" cn2Label=%{NUMBER:pkt_sent} %{WORD:}="," cn2Label=%{GREEDYDATA:pkt_sent}"] } }
            grok { match => { "msg_all" => [" spt=%{NUMBER:src_port} %{WORD:}="," spt=%{GREEDYDATA:src_port}"] } }
            grok { match => { "msg_all" => [" snpt=%{NUMBER:nat_src_port} %{WORD:}="," snpt=%{GREEDYDATA:nat_src_port}"] } }
            grok { match => { "msg_all" => [" smac=%{DATA:srcMac} %{WORD:}="," smac=%{GREEDYDATA:srcMac}"] } }
            grok { match => { "msg_all" => [" cs3Label=%{DATA:srcZone} %{WORD:}="," cs3Label=%{GREEDYDATA:srcZone}"] } }
            grok { match => { "msg_all" => [" cn1=%{DATA:icmp_type} %{WORD:}="," cn1=%{GREEDYDATA:icmp_type}"] } }
            grok { match => { "msg_all" => [" susr=(\")?%{DATA:user}(\")? %{WORD:}="," susr=%{GREEDYDATA:user}"] } }
            grok { match => { "msg_all" => [" cs2=%{DATA:vpnpolicy} %{WORD:}="," cs2=%{GREEDYDATA:vpnpolicy}"] } }
            grok { match => { "msg_all" => [" cs3=%{DATA:vpnpolicyDst} %{WORD:}="," cs3=%{GREEDYDATA:vpnpolicyDst}"] } }

          }
          #Checking if the src field exists and using grok to parse it
          if ([src]){
            grok {
              match => { "src" => "%{IPORHOST:src_ip}(:%{NUMBER:src_port})?(:%{WORD:device_inbound_interface})?(:%{GREEDYDATA:src_resolved_name})?"}
            }
          }
          #Checking if the dst field exists and using grok to parse it
          if ([dst]){
            grok {
              match => { "dst" => "%{IPORHOST:dest_ip}(:%{NUMBER:dest_port})?(:%{WORD:device_outbound_interface})?(:%{GREEDYDATA:dest_resolved_name})?"}
            }
          }
          #Checking if the protocol field exists and using grok to parse it
          if ([protocol]){
            grok {
              match => { "protocol" => "%{WORD:proto}(/%{GREEDYDATA:service})?"}
            }
          }
          #......................................................................#
          #Generate UTM ACTION field when connection established
          #......................................................................#
          if ([event_id] and (
              ( ([event_id]=="16") or ([event_id]=="24") or ([event_id]=="29") or ([event_id]=="31") or ([event_id]=="36") or ([event_id]=="43") or ([event_id]=="53") or ([event_id]=="58") or ([event_id]=="87") or ([event_id]=="88") 
                  or ([event_id]=="89") or ([event_id]=="98") or ([event_id]=="131") or ([event_id]=="132") or ([event_id]=="168") or ([event_id]=="199") or ([event_id]=="205") or ([event_id]=="207") or ([event_id]=="215") 
                  or ([event_id]=="235") or ([event_id]=="236") or ([event_id]=="237") or ([event_id]=="238") or ([event_id]=="261") or ([event_id]=="262") or ([event_id]=="263") or ([event_id]=="264") or ([event_id]=="265") 
                  or ([event_id]=="273") or ([event_id]=="286") or ([event_id]=="288") or ([event_id]=="289") or ([event_id]=="307") or ([event_id]=="318") or ([event_id]=="319") or ([event_id]=="327") or ([event_id]=="335") 
                  or ([event_id]=="346") or ([event_id]=="351") or ([event_id]=="352") or ([event_id]=="353") or ([event_id]=="354") or ([event_id]=="355") or ([event_id]=="356") or ([event_id]=="357") or ([event_id]=="358") 
                  or ([event_id]=="372") or ([event_id]=="373") or ([event_id]=="375") or ([event_id]=="378") or ([event_id]=="379") or ([event_id]=="381") or ([event_id]=="388") or ([event_id]=="389") or ([event_id]=="390") 
                  or ([event_id]=="391") or ([event_id]=="392") or ([event_id]=="393") or ([event_id]=="394") or ([event_id]=="395") or ([event_id]=="396") or ([event_id]=="429") or ([event_id]=="430") or ([event_id]=="431") 
                  or ([event_id]=="432") or ([event_id]=="433") or ([event_id]=="445") or ([event_id]=="429") or ([event_id]=="535") or ([event_id]=="537") or ([event_id]=="542") or ([event_id]=="622") or ([event_id]=="623") 
                  or ([event_id]=="634") or ([event_id]=="636") or ([event_id]=="646") or ([event_id]=="647") or ([event_id]=="651") or ([event_id]=="666") or ([event_id]=="712") or ([event_id]=="713") or ([event_id]=="734") 
                  or ([event_id]=="735") or ([event_id]=="760") or ([event_id]=="797") or ([event_id]=="798") or ([event_id]=="820") or ([event_id]=="859") or ([event_id]=="891") or ([event_id]=="892") or ([event_id]=="1008") 
                  or ([event_id]=="1027") or ([event_id]=="1028") or ([event_id]=="1080") or ([event_id]=="1087") or ([event_id]=="1091") or ([event_id]=="1092") or ([event_id]=="1112") or ([event_id]=="1114") or ([event_id]=="1116")
                  or ([event_id]=="1124") or ([event_id]=="1153") or ([event_id]=="1179") or ([event_id]=="1183") or ([event_id]=="1187") or ([event_id]=="1267") or ([event_id]=="1424") or ([event_id]=="1445") or ([event_id]=="1452") 
                  or ([event_id]=="1490") or ([event_id]=="1491") or ([event_id]=="1498") or ([event_id]=="1500") or ([event_id]=="1502") or ([event_id]=="1503") or ([event_id]=="1504") or ([event_id]=="1534")) 
              or ((([event_id]!="16") and ([event_id]!="24") and ([event_id]!="29") and ([event_id]!="31") and ([event_id]!="36") and ([event_id]!="43") and ([event_id]!="53") and ([event_id]!="58") and ([event_id]!="87") and ([event_id]!="88") 
                  and ([event_id]!="89") and ([event_id]!="98") and ([event_id]!="131") and ([event_id]!="132") and ([event_id]!="168") and ([event_id]!="199") and ([event_id]!="205") and ([event_id]!="207") and ([event_id]!="215") 
                  and ([event_id]!="235") and ([event_id]!="236") and ([event_id]!="237") and ([event_id]!="238") and ([event_id]!="261") and ([event_id]!="262") and ([event_id]!="263") and ([event_id]!="264") and ([event_id]!="265") 
                  and ([event_id]!="273") and ([event_id]!="286") and ([event_id]!="288") and ([event_id]!="289") and ([event_id]!="307") and ([event_id]!="318") and ([event_id]!="319") and ([event_id]!="327") and ([event_id]!="335") 
                  and ([event_id]!="346") and ([event_id]!="351") and ([event_id]!="352") and ([event_id]!="353") and ([event_id]!="354") and ([event_id]!="355") and ([event_id]!="356") and ([event_id]!="357") and ([event_id]!="358") 
                  and ([event_id]!="372") and ([event_id]!="373") and ([event_id]!="375") and ([event_id]!="378") and ([event_id]!="379") and ([event_id]!="381") and ([event_id]!="388") and ([event_id]!="389") and ([event_id]!="390") 
                  and ([event_id]!="391") and ([event_id]!="392") and ([event_id]!="393") and ([event_id]!="394") and ([event_id]!="395") and ([event_id]!="396") and ([event_id]!="429") and ([event_id]!="430") and ([event_id]!="431") 
                  and ([event_id]!="432") and ([event_id]!="433") and ([event_id]!="445") and ([event_id]!="429") and ([event_id]!="535") and ([event_id]!="537") and ([event_id]!="542") and ([event_id]!="622") and ([event_id]!="623") 
                  and ([event_id]!="634") and ([event_id]!="636") and ([event_id]!="646") and ([event_id]!="647") and ([event_id]!="651") and ([event_id]!="666") and ([event_id]!="712") and ([event_id]!="713") and ([event_id]!="734") 
                  and ([event_id]!="735") and ([event_id]!="760") and ([event_id]!="797") and ([event_id]!="798") and ([event_id]!="820") and ([event_id]!="859") and ([event_id]!="891") and ([event_id]!="892") and ([event_id]!="1008") 
                  and ([event_id]!="1027") and ([event_id]!="1028") and ([event_id]!="1080") and ([event_id]!="1087") and ([event_id]!="1091") and ([event_id]!="1092") and ([event_id]!="1112") and ([event_id]!="1114") and ([event_id]!="1116")
                  and ([event_id]!="1124") and ([event_id]!="1153") and ([event_id]!="1179") and ([event_id]!="1183") and ([event_id]!="1187") and ([event_id]!="1267") and ([event_id]!="1424") and ([event_id]!="1445") and ([event_id]!="1452") 
                  and ([event_id]!="1490") and ([event_id]!="1491") and ([event_id]!="1498") and ([event_id]!="1500") and ([event_id]!="1502") and ([event_id]!="1503") and ([event_id]!="1504") and ([event_id]!="1534")) 
                  and ([src_ip]) and ([dest_ip]) and ([bytes_rcvd]) and ([bytes_rcvd]!="0") and (([bytes_sent] and ([bytes_sent]!="0")) or ([proto] and ([proto]=="ftp")))))){
                    mutate {
                      add_field => { "[logx][utm][action]" => "Success" }
                    }
                  }

          mutate {
            #Rename fields used by correlation engine
            rename => { "[src_ip]" => "[logx][sonicwall][src_ip]" }
            rename => { "[src_port]" => "[logx][sonicwall][src_port]" }
            rename => { "[dest_ip]" => "[logx][sonicwall][dest_ip]" }
            rename => { "[dest_port]" => "[logx][sonicwall][dest_port]" }
            rename => { "[proto]" => "[logx][sonicwall][proto]" }

            #Rename all others fields            
            rename => { "[device_inbound_interface]" => "[logx][sonicwall][device_inbound_interface]" }
            rename => { "[device_outbound_interface]" => "[logx][sonicwall][device_outbound_interface]" }
            rename => { "[src_resolved_name]" => "[logx][sonicwall][src_resolved_name]" }
            rename => { "[dest_resolved_name]" => "[logx][sonicwall][dest_resolved_name]" }
            rename => { "[af_policy_id]" => "[logx][sonicwall][af_policy_id]" }
            rename => { "[af_policy]" => "[logx][sonicwall][af_policy]" }
            rename => { "[af_policy_type]" => "[logx][sonicwall][af_policy_type]" }
            rename => { "[=%{WORD:af_policy_service]" => "[logx][sonicwall][af_policy_service]" }
            rename => { "[af_policy_action]" => "[logx][sonicwall][af_policy_action]" }
            rename => { "[af_policy_object]" => "[logx][sonicwall][af_policy_object]" }
            rename => { "[active_interface]" => "[logx][sonicwall][active_interface]" }
            rename => { "[num_app_id]" => "[logx][sonicwall][num_app_id]" }
            rename => { "[app_cat]" => "[logx][sonicwall][app_cat]" }
            rename => { "[appid]" => "[logx][sonicwall][appid]" }
            rename => { "[app_name]" => "[logx][sonicwall][app_name]" }
            rename => { "[arg]" => "[logx][sonicwall][arg]" }
            rename => { "[bcast_pkt_received]" => "[logx][sonicwall][bcast_pkt_received]" }
            rename => { "[bcast_pkt_transm]" => "[logx][sonicwall][bcast_pkt_transm]" }
            rename => { "[blade_id]" => "[logx][sonicwall][blade_id]" }
            rename => { "[msg_category]" => "[logx][sonicwall][msg_category]" }
            rename => { "[cfs_category]" => "[logx][sonicwall][cfs_category]" }
            rename => { "[rule_category]" => "[logx][sonicwall][rule_category]" }
            rename => { "[conn_duration]" => "[logx][sonicwall][conn_duration]" }
            rename => { "[change]" => "[logx][sonicwall][change]" }
            rename => { "[code]" => "[logx][sonicwall][code]" }
            rename => { "[conns]" => "[logx][sonicwall][conns]" }
            rename => { "[contentObject]" => "[logx][sonicwall][contentObject]" }
            rename => { "[deep_packet_inspection]" => "[logx][sonicwall][deep_packet_inspection]" }
            rename => { "[dstMac]" => "[logx][sonicwall][destMac]" }
            rename => { "[dstV6]" => "[logx][sonicwall][destV6]" }
            rename => { "[dstname]" => "[logx][sonicwall][destname]" }
            rename => { "[dstZone]" => "[logx][sonicwall][destZone]" }
            rename => { "[session_dur]" => "[logx][sonicwall][session_dur]" }
            rename => { "[fw_status_report]" => "[logx][sonicwall][fw_status_report]" }
            rename => { "[flow_type]" => "[logx][sonicwall][flow_type]" }
            rename => { "[fileid]" => "[logx][sonicwall][fileid]" }
            rename => { "[filetxstatus]" => "[logx][sonicwall][filetxstatus]" }
            rename => { "[fw_wan]" => "[logx][sonicwall][fw_wan]" }
            rename => { "[fw_action]" => "[logx][sonicwall][fw_action]" }
            rename => { "[fw_lan]" => "[logx][sonicwall][fw_lan]" }
            rename => { "[group_cat]" => "[logx][sonicwall][group_cat]" }
            rename => { "[good_bytes_received]" => "[logx][sonicwall][good_bytes_received]" }
            rename => { "[good_bytes_transm]" => "[logx][sonicwall][good_bytes_transm]" }
            rename => { "[id]" => "[logx][sonicwall][id]"}
            rename => { "[interval]" => "[logx][sonicwall][interval]" }
            rename => { "[icmpCode]" => "[logx][sonicwall][icmpCode]" }
            rename => { "[interface_statistics_reported]" => "[logx][sonicwall][interface_statistics_reported]" }
            rename => { "[ipscat]" => "[logx][sonicwall][ipscat]" }
            rename => { "[ipspri]" => "[logx][sonicwall][ipspri]" }
            rename => { "[lic]" => "[logx][sonicwall][lic]" }
            rename => { "[event_id]" => "[logx][sonicwall][event_id]" }
            rename => { "[mailFrom]" => "[logx][sonicwall][mailFrom]" }
            rename => { "[msg]" => "[logx][sonicwall][msg]" }
            rename => { "[mgmt_source_ip]" => "[logx][sonicwall][mgmt_source_ip]" }
            rename => { "[msg_count]" => "[logx][sonicwall][msg_count]" }
            rename => { "[nat_dst]" => "[logx][sonicwall][nat_dest]" }
            rename => { "[nat_dst_v6]" => "[logx][sonicwall][nat_dest_v6]" }
            rename => { "[nat_src]" => "[logx][sonicwall][nat_src]" }
            rename => { "[nat_src_v6]" => "[logx][sonicwall][nat_src_v6]" }
            rename => { "[note]" => "[logx][sonicwall][note]" }
            rename => { "[npcs]" => "[logx][sonicwall][npcs]" }
            rename => { "[request_method]" => "[logx][sonicwall][request_method]" }
            rename => { "[packetdatId]" => "[logx][sonicwall][packetdatId]" }
            rename => { "[packetdatNum]" => "[logx][sonicwall][packetdatNum]" }
            rename => { "[packetdatEnc]" => "[logx][sonicwall][packetdatEnc]" }
            rename => { "[severity]" => "[logx][sonicwall][severity]" }
            rename => { "[pt]" => "[logx][sonicwall][pt]" }
            rename => { "[email_recipient]" => "[logx][sonicwall][email_recipient]" }
            rename => { "[radio]" => "[logx][sonicwall][radio]" }
            rename => { "[bytes_rcvd]" => "[logx][sonicwall][bytes_rcvd]" }
            rename => { "[referer]" => "[logx][sonicwall][referer]" }
            rename => { "[result_code]" => "[logx][sonicwall][result_code]" }
            rename => { "[pkt_received]" => "[logx][sonicwall][pkt_received]" }
            rename => { "[rule]" => "[logx][sonicwall][rule]" }
            rename => { "[bytes_sent]" => "[logx][sonicwall][bytes_sent]" }
            rename => { "[service]" => "[logx][sonicwall][service]" }
            rename => { "[sess]" => "[logx][sonicwall][sess]" }
            rename => { "[sid]" => "[logx][sonicwall][sid]" }
            rename => { "[serial_num]" => "[logx][sonicwall][serial_num]" }
            rename => { "[pkt_sent]" => "[logx][sonicwall][pkt_sent]" }
            rename => { "[priority]" => "[logx][sonicwall][priority]" }
            rename => { "[anti_spyware_cat]" => "[logx][sonicwall][anti_spyware_cat]" }
            rename => { "[anti_spyware_pri]" => "[logx][sonicwall][anti_spyware_pri]" }
            rename => { "[srcMac]" => "[logx][sonicwall][srcMac]" }
            rename => { "[srcZone]" => "[logx][sonicwall][srcZone]" }
            rename => { "[station]" => "[logx][sonicwall][station]" }
            rename => { "[time]" => "[logx][sonicwall][time]" }
            rename => { "[icmp_type]" => "[logx][sonicwall][icmp_type]" }
            rename => { "[ucast_pkt_received]" => "[logx][sonicwall][ucast_pkt_received]" }
            rename => { "[ucast_pkt_transm]" => "[logx][sonicwall][ucast_pkt_transm]" }
            rename => { "[unsynched]" => "[logx][sonicwall][unsynched]" }
            rename => { "[usestandbysa]" => "[logx][sonicwall][usestandbysa]" }
            rename => { "[user]" => "[logx][sonicwall][user]" }
            rename => { "[vpnpolicy]" => "[logx][sonicwall][vpnpolicy]" }
            rename => { "[vpnpolicyDst]" => "[logx][sonicwall][vpnpolicyDst]" }
      
            #Rename fields of CEF format only
            rename => { "[nat_dest_port]" => "[logx][sonicwall][nat_dest_port]" }
            rename => { "[request]" => "[logx][sonicwall][request]" }
            rename => { "[nat_src_port]" => "[logx][sonicwall][nat_src_port]" }
            rename => { "[cef_version]" => "[logx][sonicwall][cef_version]" }
            rename => { "[dvc_vendor]" => "[logx][sonicwall][dvc_vendor]" }
            rename => { "[dvc_product]" => "[logx][sonicwall][dvc_product]" }
            rename => { "[dvc_version]" => "[logx][sonicwall][dvc_version]" }
            rename => { "[event_name]" => "[logx][sonicwall][event_name]" }
          }

          #Finally, remove unnecessary fields
          mutate {
              remove_field => ["@version","path","tags","type","syslog_version",
              "not_defined","src","protocol","dst","msg_all","cef_msg_all","syslog_date_host"]
          }
        }
 }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["original_log_message","headers"]
   }
}
