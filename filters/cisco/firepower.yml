# CISCO Firepower filter, version 3.0.0
# Based on examples provided and https://www.cisco.com/c/en/us/td/docs/security/firepower/Syslogs/b_fptd_syslog_guide.html
# Filter Input requirements -> Syslog
#
# 1. Parsing the message field containing the Cisco Firepower log
pipeline:
  - dataTypes:
      - firewall-cisco-firepower
    steps:
      # Common Firepower fields
      - grok:
          patterns:
            - fieldName: log.syslogPri
              pattern: '(\<{{.integer}}\>)'
            - fieldName: log.ciscoTime
              pattern: '{{.day}}\s{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.asaHeader
              pattern: '{{.data}}FTD-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      - grok:
          patterns:
            - fieldName: log.ciscoTime
              pattern: '{{.day}}\s{{.monthName}}\s{{.monthDay}}\s{{.year}}\s{{.time}}'
            - fieldName: local.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.firePowerHeader
              pattern: '{{.data}}FTD-'
            - fieldName: log.severity
              pattern: '{{.integer}}'
            - fieldName: log.messageId
              pattern: '-{{.integer}}'
            - fieldName: log.ciscoSeparator
              pattern: '\:{{.space}}'
            - fieldName: log.msg
              pattern: '{{.greedy}}'
          source: raw
      # Removing unwanted prefixes
      - trim:
          function: prefix
          substring: '-'
          fields:
            - log.messageId
      # Field conversions
      - cast:
          fields:
            - log.messageId
          to: int
      # Begining specific message parsing
      #......................................................................#
      # FTD-2-106001
      - grok:
          patterns:
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '/{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'flags'
            - fieldName: log.flags
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001

      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106001
      #......................................................................#
      # FTD-2-106017
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'IP\sdue\sto'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106017
      #......................................................................#
      # FTD-1-106021
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: action
              pattern: '{{.greedy}}from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.irrelevant
              pattern: 'on\sinterface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106021
      #......................................................................#
      # FTD-2-106101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Number of cached deny-flows for ACL log has reached limit'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Number of cached'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Parsing the limit number
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.numFlows
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      # Field conversions
      - cast:
          fields:
            - log.numFlows
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106101
      #......................................................................#
      # FTD-6-106102,FTD-4-106103
      # First variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      # Second variant
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'access-list'
            - fieldName: log.accessList
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})\s'
            - fieldName: log.srcInterface
              pattern: '{{.data}}/'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: from.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '-\>'
            - fieldName: log.dstInterface
              pattern: '{{.data}}/'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: to.port
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'hit-cnt'
            - fieldName: log.hitCount
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: '/'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: prefix
          substring: '('
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      - trim:
          function: suffix
          substring: ')'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106102 || msgId==106103
      #......................................................................#
      # FTD-6-109101
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA disconnect request'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with\saudit-session-id:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109101
      #......................................................................#
      # FTD-4-109102
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ', but cannot find named session'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109102
      #......................................................................#
      # FTD-3-109103
      - grok:
          patterns:
            - fieldName: action
              pattern: 'CoA {{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: 'failed for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}),'
            - fieldName: log.irrelevant
              pattern: 'with session ID:'
            - fieldName: log.auditSessionId
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'CoA'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==109103
      #......................................................................#
      # FTD-109201 to 109213
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'UAUTH(:)? Session(\s|=)'
            - fieldName: log.session
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'User(\s|=)'
            - fieldName: from.user
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'Assigned IP(\s|=)'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.session
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId>=109201 && msgId<=109213
      #......................................................................#
      # FTD-6-113004
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user {{.word}} Successful'
            - fieldName: log.irrelevant
              pattern: '\:'
            - fieldName: log.irrelevant
              pattern: 'server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user {{.word}}'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ':'
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      - trim:
          function: suffix
          substring: ','
          fields:
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113004
      #......................................................................#
      # FTD-6-113005
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user authentication Rejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)'
            - fieldName: log.reason
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(server|Server)(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.data}}(\:|,)'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user authentication'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - to.ip
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113005
      #......................................................................#
      # FTD-6-113008
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA transaction status ACCEPT(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?(u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113008
      #......................................................................#
      # FTD-6-113009
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved default group policy'
            - fieldName: log.policy
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'for (u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved default group policy'
            - fieldName: log.policy
              pattern: '{{.data}}\sfor'
            - fieldName: log.irrelevant
              pattern: '(u|U)ser(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113009
      #......................................................................#
      # FTD-6-113010
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA challenge received for user'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}}) from server'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113010
      - trim:
          function: suffix
          substring: 'from server'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113010
      #......................................................................#
      # FTD-6-113011
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved user specific group policy'
            - fieldName: log.policy
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'for (u|U)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA retrieved user specific group policy'
            - fieldName: log.policy
              pattern: '{{.data}}\sfor'
            - fieldName: log.irrelevant
              pattern: '(u|U)ser(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.policy
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113011
      #......................................................................#
      # FTD-6-113012
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA user authentication Successful(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?local database(\s)?:(\s)?user(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113012
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA user authentication'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113012
      #......................................................................#
      # FTD-6-113013
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA unable to complete the request'
            - fieldName: log.irrelevant
              pattern: 'Error(\s)?:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}\:'
            - fieldName: log.irrelevant
              pattern: 'user(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113013
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113013
      #......................................................................#
      # FTD-6-113014
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA authentication server not accessible(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113014
      #......................................................................#
      # FTD-6-113015, 113017
      - grok:
          patterns:
            - fieldName: action
              pattern: '(AAA user authentication|AAA credentials)\s(R|r)ejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: 'local database(\s)?:(\s)?(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?:'
            - fieldName: log.irrelevant
              pattern: 'user IP(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '(AAA user authentication|AAA credentials)\s'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113015 || msgId==113017
      #......................................................................#
      # FTD-6-113016
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AAA credentials rejected(\s)?'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?reason(\s)?=(\s)?'
            - fieldName: log.reason
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: 'server(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}}(\s)?\:'
            - fieldName: log.irrelevant
              pattern: '(U|u)ser(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?:'
            - fieldName: log.irrelevant
              pattern: 'user IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.reason
            - to.ip
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'AAA credentials'
            - fieldName: actionResult
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113016
      #......................................................................#
      # FTD-4-113019
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?=(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.irrelevant
              pattern: '(U|u)sername(\s)?=(\s)?'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?,'
            - fieldName: log.irrelevant
              pattern: 'IP(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.data}},'
            - fieldName: action
              pattern: '(\s)?Session disconnected\.'
            - fieldName: log.irrelevant
              pattern: '(\s)?Session Type:(\s)?'
            - fieldName: log.sessionType
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Duration:(\s)?'
            - fieldName: log.duration
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Bytes xmt:(\s)?'
            - fieldName: from.bytesSent
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Bytes rcv:(\s)?'
            - fieldName: from.bytesReceived
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '(\s)?Reason:(\s)?'
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.group
            - from.user
            - from.ip
            - log.sessionType
            - log.duration
            - from.bytesSent
            - from.bytesReceived
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      - cast:
          fields:
            - from.bytesSent
            - from.bytesReceived
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113019
      #......................................................................#
      # FTD-113031,113032,113033
      # Common fields
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}\sUser'
            - fieldName: from.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?IP'
            - fieldName: from.ip
              pattern: '{{.ipv4}}|{{.ipv6}}|{{.hostname}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      # Specific fields
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AnyConnect (vpn-filter|ipv6-vpn-filter|session not allowed)'
            - fieldName: log.filter
              pattern: '{{.data}}\sis'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - grok:
          patterns:
            - fieldName: action
              pattern: 'AnyConnect (vpn-filter|ipv6-vpn-filter|session not allowed)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      - trim:
          function: suffix
          substring: 'is'
          fields:
            - log.filter
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113031 || msgId==113032 || msgId==113033
      #......................................................................#
      # FTD-113034,113035,113036,113038,113039
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '(\<)?{{.data}}(\>)?\sUser'
            - fieldName: from.user
              pattern: '(''{{.data}}''|(\<)?{{.data}}(\>)?)(\s)?IP'
            - fieldName: from.ip
              pattern: '(\<)?({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\>)?'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: prefix
          substring: '<'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      - trim:
          function: suffix
          substring: '>'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113034 || msgId==113035 || msgId==113036 || msgId==113038 || msgId==113039
      #......................................................................#
      # FTD-4-113042
      - grok:
          patterns:
            - fieldName: action
              pattern: 'CoA: Non-HTTP connection from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'for user'
            - fieldName: remote.user
              pattern: '(''{{.data}}''|{{.data}})(\s)?at'
            - fieldName: remote.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113042
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113042
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113042
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113042
      - trim:
          function: suffix
          substring: 'at'
          fields:
            - remote.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==113042
      #......................................................................#
      # FTD-2-201003
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Embryonic limit exceeded'
            - fieldName: log.numCons
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: log.limit
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.globalIp
              pattern: '\({{.data}}\)'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '/(\s)?'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'on interface'
            - fieldName: log.dstInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==201003
      - trim:
          function: prefix
          substring: '('
          fields:
            - log.globalIp
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==201003
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.globalIp
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==201003
      #......................................................................#
      # FTD-4-209003
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Fragment database limit of'
            - fieldName: log.limit
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'exceeded:(\s)?src(\s)?=(\s)?'
            - fieldName: from.ip
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'dest(\s)?=(\s)?'
            - fieldName: to.ip
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'proto(\s)?=(\s)?'
            - fieldName: protocol
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'id(\s)?=(\s)?'
            - fieldName: log.id
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==209003
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.ip
            - to.ip
            - protocol
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==209003
      - cast:
          fields:
            - log.limit
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==209003
      #......................................................................#
      # FTD-3-316001
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Denied new tunnel'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==316001
      # Action result
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==316001
      #......................................................................#
      # FTD-3-316002
      - grok:
          patterns:
            - fieldName: action
              pattern: 'VPN Handle error'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?protocol='
            - fieldName: protocol
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'src\s'
            - fieldName: log.inIfNum
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: ',(\s)?dst'
            - fieldName: log.outIfNum
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==316002
      - trim:
          function: suffix
          substring: ','
          fields:
            - protocol
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==316002
      - cast:
          fields:
            - log.inIfNum
            - log.outIfNum
          to: int
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==316002
      #......................................................................#
      # FTD-6-302003,302004
      # First variant
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Built H245 connection|Pre-allocate H323 UDP backconnection)'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: log.foreignAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpToip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            - fieldName: log.irrelevant
              pattern: '(to\s)?'
            - fieldName: log.localAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFromip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      # Second variant
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Built H245 connection|Pre-allocate H323 UDP backconnection)'
            - fieldName: log.irrelevant
              pattern: 'for'
            - fieldName: log.foreignAddress
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpToip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
            - fieldName: log.localAddress
              pattern: '({{.ipv4}}|{{.ipv6}})'
            - fieldName: log.tmpFromip
              pattern: '({{.ipv4}}|{{.ipv6}})((\s)?/(\s)?{{.integer}}|(\s)?/)?'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      # Parsing from/to ip and port
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: to.port
              pattern: '{{.greedy}}'      
          source: log.tmpToip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'        
          source: log.tmpToip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: from.port
              pattern: '{{.greedy}}'         
          source: log.tmpFromip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'        
          source: log.tmpFromip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
            - to.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      # Removing temp fields
      - delete:
          fields:
            - log.tmpFromip
            - log.tmpToip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302003 || msgId==302004
      #......................................................................#
      # FTD-6-302012
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Pre-allocate H225 Call Signalling Connection'
            - fieldName: log.irrelevant
              pattern: 'for faddr'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: from.port
              pattern: '/(\s)?{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to laddr'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302012
      - trim:
          function: prefix
          substring: '/'
          fields:
            - from.port
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302012
      #......................................................................#
      # FTD-6-302013
      - grok:
          patterns:
            - fieldName: log.tmpDirection
              pattern: 'Built\s{{.word}}\s(Probe)?'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      # Parsing direction field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpDirection
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'  
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302013
      #......................................................................#
      # FTD-6-302014
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown\s(Probe)?'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      # Parsing AAA user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '{{.data}}\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302014
      #......................................................................#
      # FTD-6-302015
      - grok:
          patterns:
            - fieldName: log.tmpDirection
              pattern: 'Built\s{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      # Parsing direction field
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.greedy}}'
          source: log.tmpDirection
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'  
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302015
      #......................................................................#
      # FTD-6-302016
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'  
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302016
      #......................................................................#
      # FTD-6-302017
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'GRE connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.translatedIpFrom
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.realCid
              pattern: '{{.data}}\('
            - fieldName: log.translatedIpTo
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # Parsing translatedCid and, firewall user to and AAA user if present
      - grok:
          patterns:
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
            - fieldName: log.tmpUserInfo
              pattern: '{{.greedy}}'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - grok:
          patterns:
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # FW user and AAA user
      - grok:
          patterns:
            - fieldName: log.tmpFwUserTo
              pattern: '\({{.data}}\)'
            - fieldName: to.user
              pattern: '\({{.data}}\)'
          source: log.tmpUserInfo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - grok:
          patterns:
            - fieldName: log.tmpFwUserTo
              pattern: '\({{.data}}\)'
          source: log.tmpUserInfo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - to.user
            - log.translatedCid
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.realCid
            - to.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpDirection
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
            - log.tmpUserInfo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - log.translatedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302017
      #......................................................................#
      # FTD-6-302018
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown GRE connection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.translatedIpFrom
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.realCid
              pattern: '{{.data}}\('
            - fieldName: log.translatedIpTo
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.translatedCid
              pattern: '{{.data}}\)'
            - fieldName: log.tmpFwUserTo
              pattern: '({{.data}})?duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      # Parsing firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      # Parsing firewall user to, and AAA name of the user if exists
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'  
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018

      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
          source: log.rest
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018

      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - from.user
            - log.translatedCid
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      # Cleaning fields
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.realCid
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - log.translatedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302018
      #......................................................................#
      # FTD-6-302020, 302021
      # 302020
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for faddr'
            - fieldName: log.tmpFaddrAndFwUser
              pattern: '({{.data}})gaddr'
            - fieldName: log.tmpGaddrAndFwUser
              pattern: '({{.data}})laddr'
            - fieldName: log.tmpLaddrAndFwUser
              pattern: '({{.data}})type'
            - fieldName: log.icmpType
              pattern: '({{.data}})code'
            - fieldName: log.icmpCode
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020
      # 302021
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for faddr'
            - fieldName: log.tmpFaddrAndFwUser
              pattern: '({{.data}})gaddr'
            - fieldName: log.tmpGaddrAndFwUser
              pattern: '({{.data}})laddr'
            - fieldName: log.tmpLaddrAndFwUser
              pattern: '({{.data}})type'
            - fieldName: log.icmpType
              pattern: '({{.data}})code'
            - fieldName: log.icmpCode
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302021
      # Common parsing for 302020 and 302021
      # For parsing faddr and fwuser from (Begin with ip/port), or icmpSeqNum
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '{{.greedy}}'
          source: log.tmpFaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - grok:
          patterns:
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserFrom
              pattern: '{{.greedy}}'
          source: log.tmpFaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # icmpSeqNum variants
      - grok:
          patterns:
            - fieldName: log.icmpSeqNum
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'gaddr'
          source: log.tmpFaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - grok:
          patterns:
            - fieldName: log.icmpSeqNum
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: 'gaddr'
          source: log.tmpFaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Cleaning icmpSeqNum
      - trim:
          function: suffix
          substring: 'gaddr'
          fields:
            - log.icmpSeqNum
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Continue with firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # For parsing gaddr and global fwuser (Begin with ip/port), or icmpType
      - grok:
          patterns:
            - fieldName: log.globalIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.globalPort
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: '{{.greedy}}'
          source: log.tmpGaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - grok:
          patterns:
            - fieldName: log.globalIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserGlobal
              pattern: '{{.greedy}}'
          source: log.tmpGaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # icmpType variants
      - grok:
          patterns:
            - fieldName: log.icmpType
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'laddr'
          source: log.tmpGaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - grok:
          patterns:
            - fieldName: log.icmpType
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserGlobal
              pattern: 'laddr'
          source: log.tmpGaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Cleaning icmpType
      - trim:
          function: suffix
          substring: 'laddr'
          fields:
            - log.icmpType
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - trim:
          function: suffix
          substring: 'code'
          fields:
            - log.icmpType
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Continue with global firewall
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.globalFirewallUser
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserGlobal
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # For parsing laddr and fwuser to (Begin with ip/port)
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.tmpLaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.tmpFwUserTo
              pattern: '{{.greedy}}'
          source: log.tmpLaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Continue with firewall user to
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserTo
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - to.ip
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.firewallUserTo
            - log.globalFirewallUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpFwUserTo
            - log.tmpFwUserGlobal
            - log.tmpFaddrAndFwUser
            - log.tmpGaddrAndFwUser
            - log.tmpLaddrAndFwUser
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302020 || msgId==302021
      #......................................................................#
      # FTD-6-302022, 302024, 302026
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: log.role
              pattern: '({{.data}})stub'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpMappedIpPortFrom
              pattern: '\({{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpMappedIpPortTo
              pattern: '\({{.data}}\)'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Parsing mapped ip,port from tmp fields
      # With port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Without port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Parsing mapped ip,port to, from tmp fields
      # With port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Without port
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}'
            - fieldName: log.irrelevant
              pattern: '\)'
          source: log.tmpMappedIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'stub'
          fields:
            - log.role
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpMappedIpPortFrom
            - log.tmpMappedIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302022 || msgId==302024 || msgId==302026
      #......................................................................#
      # FTD-6-302023, 302025, 302027
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown stub'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'connection for'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: 'bytes'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302023 || msgId==302025 || msgId==302027
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302023 || msgId==302025 || msgId==302027
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302023 || msgId==302025 || msgId==302027
      #......................................................................#
      # FTD-302033,302034
      - grok:
          patterns:
            - fieldName: action
              pattern: '(Pre-allocated|Unable to pre-allocate) H323 GUP Connection'
            - fieldName: log.irrelevant
              pattern: 'for faddr'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.tmpPortFrom
              pattern: '{{.data}}to laddr'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: log.tmpIpPortTo
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      # Parsing optional ports from y to
      - grok:
          patterns:
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpPortFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.greedy}}'
          source: log.tmpIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      - grok:
          patterns:
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
          source: log.tmpIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      # Remove tmp fields
      - delete:
          fields:
            - log.tmpPortFrom
            - log.tmpIpPortTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302033 || msgId==302034
      #......................................................................#
      # FTD-6-302303
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built\s{{.word}}\sstate-bypass\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpFrom
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortFrom
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.mappedIpTo
              pattern: '{{.data}}/'
            - fieldName: log.mappedPortTo
              pattern: '{{.integer}}'
            - fieldName: log.rest
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302303
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
              variables:
                - get: log.messageId
                  as: msgId
                  ofType: int
              expression: msgId==302303
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302303
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
            - log.mappedIpFrom
            - log.mappedIpTo
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302303
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302303
      #......................................................................#
      # FTD-6-302304
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown\s{{.word}}\sstate-bypass\sconnection'
            - fieldName: log.connectionId
              pattern: '({{.data}})from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.duration
              pattern: '{{.time}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: ','
            - fieldName: log.reason
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302304
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Built'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
              variables:
                - get: log.messageId
                  as: msgId
                  ofType: int
              expression: msgId==302304
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302304
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302304
      - trim:
          function: suffix
          substring: 'from'
          fields:
            - log.connectionId
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==302304
      #......................................................................#
      # FTD-6-305009
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built (dynamic|static) translation'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: log.tmpAclSrcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: log.mappedIpTo
              pattern: '{{.greedy}}' 
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      # Parsing srcInterface
      # With ACL
      - grok:
          patterns:
            - fieldName: log.srcInterface
              pattern: '{{.data}}\('
            - fieldName: log.accessList
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpAclSrcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      # Without ACL
      - grok:
          patterns:
            - fieldName: log.srcInterface
              pattern: '{{.data}}:'
          source: log.tmpAclSrcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpAclSrcInterface
      # Cleaning fields
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.accessList
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305009
      #......................................................................#
      # FTD-6-305010
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown (dynamic|static) translation'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305010
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305010
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
      # Cleaning fields
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305010
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305010
      #......................................................................#
      # FTD-6-305011
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built\s(dynamic|static)\s(TCP|UDP|ICMP)\stranslation'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: log.srcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      # Parsing protocol
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Built\s(dynamic|static)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305011
      #......................................................................#
      # FTD-6-305012
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown\s(dynamic|static)\s(TCP|UDP|ICMP)\stranslation'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: log.tmpAclSrcInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.tmpFwUserFrom
              pattern: '({{.data}})?to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'duration'
            - fieldName: log.duration
              pattern: '{{.time}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Parsing firewall user from
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.firewallUserFrom
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpFwUserFrom
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Parsing protocol
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Teardown\s(dynamic|static)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Parsing srcInterface
      # With ACL
      - grok:
          patterns:
            - fieldName: log.srcInterface
              pattern: '{{.data}}\('
            - fieldName: log.accessList
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.tmpAclSrcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Without ACL
      - grok:
          patterns:
            - fieldName: log.srcInterface
              pattern: '{{.data}}:'
          source: log.tmpAclSrcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Parsing srcInterface from himself to avoid parsing issues
      - grok:
          patterns:
            - fieldName: log.srcInterface
              pattern: '{{.data}}\('
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.firewallUserFrom
            - log.accessList
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      # Removing tmp fields
      - delete:
          fields:
            - log.tmpFwUserFrom
            - log.tmpAclSrcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012

      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.srcInterface
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      - trim:
          function: suffix
          substring: '('
          fields:
            - log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==305012
      #......................................................................#
      # FTD-3-322001
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.word}}\sMAC\saddress'
            - fieldName: local.mac
              pattern: '{{.data}}(\s)?,'
            - fieldName: log.reason
              pattern: '{{.data}}on'
            - fieldName: log.irrelevant
              pattern: 'interface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322001
      # Action result
      - grok:
          patterns:
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322001
      # Cleaning fields
      - trim:
          function: suffix
          substring: ','
          fields:
            - local.mac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322001
      - trim:
          function: suffix
          substring: 'on'
          fields:
            - log.reason
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322001
      #......................................................................#
      # FTD-3-322002
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.word}}\sinspection\scheck'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for\sarp'
            - fieldName: log.httpMessageType
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'received\sfrom\shost'
            - fieldName: from.mac
              pattern: '{{.data}}on'
            - fieldName: log.irrelevant
              pattern: 'interface'
            - fieldName: log.srcInterface
              pattern: '{{.data}}\.'
            - fieldName: log.irrelevant
              pattern: '{{.data}}Address'
            - fieldName: log.fakeSrcMac
              pattern: '{{.data}}for'
            - fieldName: log.irrelevant
              pattern: 'IP\sAddress'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}Address'
            - fieldName: log.boudSrcMac
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322002
      # Protocol
      - grok:
          patterns:
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'inspection check'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322002
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'on'
          fields:
            - from.mac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322002
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.fakeSrcMac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322002
      - trim:
          function: suffix
          substring: '.'
          fields:
            - log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322002
      #......................................................................#
      # FTD-3-322003
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.word}}\sinspection\scheck'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'for\sarp'
            - fieldName: log.httpMessageType
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'received\sfrom\shost'
            - fieldName: from.mac
              pattern: '{{.data}}on'
            - fieldName: log.irrelevant
              pattern: 'interface'
            - fieldName: log.srcInterface
              pattern: '{{.data}}\.'
            - fieldName: log.irrelevant
              pattern: '{{.data}}Address'
            - fieldName: log.fakeSrcMac
              pattern: '{{.data}}for'
            - fieldName: log.irrelevant
              pattern: 'IP\sAddress'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322003
      # Protocol
      - grok:
          patterns:
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'inspection check'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322003
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'on'
          fields:
            - from.mac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322003
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.fakeSrcMac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322003
      - trim:
          function: suffix
          substring: '.'
          fields:
            - log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==322003
      #......................................................................#
      # FTD-4-402114
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received\s(an|a)\s{{.word}}\spacket'
            - fieldName: log.irrelevant
              pattern: '\({{.data}}='
            - fieldName: log.spi
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.seqNum
              pattern: '{{.integer}}(\s)?\)'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402114
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received\s(an|a)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402114
      # Cleaning fields
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.spi
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402114
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.seqNum
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402114
      #......................................................................#
      # FTD-4-402115
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received\sa\spacket'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'containing'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'data instead of'
            - fieldName: log.expectedProtocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402115
      #......................................................................#
      # FTD-4-402116
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received\s(an|a)\s{{.word}}\spacket'
            - fieldName: log.irrelevant
              pattern: '\({{.data}}='
            - fieldName: log.spi
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.seqNum
              pattern: '{{.integer}}(\s)?\)'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}as'
            - fieldName: log.decapsulatedPktDestAddr
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}as'
            - fieldName: log.decapsulatedPktSrcAddr
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}as'
            - fieldName: log.decapsulatedPktProto
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}as'
            - fieldName: log.localProxyIpAddr
              pattern: '{{.data}}/'
            - fieldName: log.localProxyIpMask
              pattern: '{{.data}}/'
            - fieldName: log.localProxyProto
              pattern: '{{.data}}/'
            - fieldName: log.localProxyPort
              pattern: '{{.data}}and'
            - fieldName: log.irrelevant
              pattern: '{{.data}}as'
            - fieldName: log.remoteProxyIpAddr
              pattern: '{{.data}}/'
            - fieldName: log.remoteProxyIpMask
              pattern: '{{.data}}/'
            - fieldName: log.remoteProxyProto
              pattern: '{{.data}}/'
            - fieldName: log.remoteProxyPort
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received\s(an|a)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      # Cleaning fields
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.spi
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.seqNum
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      - trim:
          function: suffix
          substring: '/'
          fields:
            - log.localProxyIpAddr
            - log.localProxyIpMask
            - log.localProxyProto
            - log.remoteProxyIpAddr
            - log.remoteProxyIpMask
            - log.remoteProxyPort
            - log.remoteProxyProto
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.seqNum
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      - trim:
          function: suffix
          substring: 'and'
          fields:
            - log.localProxyPort
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402116
      #......................................................................#
      # FTD-4-402117
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received a non-IPsec \((\s)?{{.word}}(\s)?\) packet'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402117
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received a non-IPsec \('
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402117
      #......................................................................#
      # FTD-4-402118
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received\s(an|a)\s{{.word}}\spacket'
            - fieldName: log.irrelevant
              pattern: '\({{.data}}='
            - fieldName: log.spi
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.seqNum
              pattern: '{{.integer}}(\s)?\)'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}length'
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'with offset'
            - fieldName: log.fragmentOffset
              pattern: '{{.integer}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402118
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received\s(an|a)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402118
      # Cleaning fields
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.seqNum
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402118
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.spi
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402118
      #......................................................................#
      # FTD-4-402119, 402120
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'IPSEC\:(\s)?'
            - fieldName: action
              pattern: 'Received\s(an|a)\s{{.word}}\spacket'
            - fieldName: log.irrelevant
              pattern: '\({{.data}}='
            - fieldName: log.spi
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.seqNum
              pattern: '{{.integer}}(\s)?\)'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: from.user
              pattern: '{{.data}}\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402119 || msgId==402120
      # Protocol
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Received\s(an|a)'
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402119 || msgId==402120
      # Cleaning fields
      - trim:
          function: suffix
          substring: ')'
          fields:
            - log.seqNum
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402119 || msgId==402120
      - trim:
          function: suffix
          substring: ','
          fields:
            - log.spi
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402119 || msgId==402120
      #......................................................................#
      # FTD-5-402128
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'CRYPTO\:(\s)?'
            - fieldName: action
              pattern: 'An attempt to allocate a large memory block'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}\:'
            - fieldName: log.memorySize
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}\:'
            - fieldName: log.memoryLimit
              pattern: '{{.integer}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==402128
      #......................................................................#
      # FTD-4-405001
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received ARP (request|response) collision'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.mac
              pattern: '{{.data}}on'
            - fieldName: log.irrelevant
              pattern: 'interface'
            - fieldName: log.srcInterface
              pattern: '{{.data}}with'
            - fieldName: log.irrelevant
              pattern: 'existing ARP entry'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.mac
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405001
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'ARP'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405001
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405001
      - trim:
          function: suffix
          substring: 'on'
          fields:
            - from.mac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405001
      - trim:
          function: suffix
          substring: 'with'
          fields:
            - log.srcInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405001
      #......................................................................#
      # FTD-4-405002
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Received mac mismatch collision'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.mac
              pattern: '{{.data}}for'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405002
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - from.mac
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405002
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==405002
      #......................................................................#
      # FTD-4-406001
      - grok:
          patterns:
            - fieldName: action
              pattern: 'FTP port command low port(\s)?\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.irrelevant
              pattern: 'on interface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406001
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'FTP'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406001
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406001
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406001
      #......................................................................#
      # FTD-4-406002
      - grok:
          patterns:
            - fieldName: action
              pattern: 'FTP port command different address(\s)?\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: log.connectionIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.irrelevant
              pattern: '(\s)?\)'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'on interface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406002
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'FTP'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406002
      # Cleaning fields
      - trim:
          function: suffix
          substring: ':'
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==406002
      #......................................................................#
      # FTD-4-407002
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Embryonic limit {{.data}} for through connections exceeded'
            - fieldName: log.irrelevant
              pattern: '{{.data}}\.'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.globalIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?'
            - fieldName: log.irrelevant
              pattern: '\('
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '(\s)?\)(\s)?/'
            - fieldName: to.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'on interface'
            - fieldName: log.srcInterface
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==407002
      # Connection number and connection limit
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Embryonic limit'
            - fieldName: log.numCons
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '/'
            - fieldName: log.limit
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==407002
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==407002
      #......................................................................#
      # FTD-6-605004
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Login\s{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}\:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.service
              pattern: '{{.data}}for'
            - fieldName: log.irrelevant
              pattern: 'user'
            - fieldName: from.user
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      # Action result
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Login'
            - fieldName: actionResult
              pattern: '{{.word}}'
          source: action
          where:
              variables:
                - get: log.messageId
                  as: msgId
                  ofType: int
              expression: msgId==605004
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      - trim:
          function: suffix
          substring: 'for'
          fields:
            - log.service
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      - trim:
          function: prefix
          substring: '"'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      - trim:
          function: suffix
          substring: '"'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==605004
      #......................................................................#
      # FTD-2-106018
      - grok:
          patterns:
            - fieldName: action
              pattern: 'ICMP packet'
            - fieldName: log.irrelevant
              pattern: 'type'
            - fieldName: log.icmpType
              pattern: '{{.data}}\s'
            - fieldName: actionResult
              pattern: 'denied'
            - fieldName: log.irrelevant
              pattern: 'by'
            - fieldName: log.direction
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: 'list'
            - fieldName: log.accessList
              pattern: '{{.data}}src'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'dest'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106018
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'ICMP'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106018
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'src'
          fields:
            - log.accessList
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106018
      #......................................................................#
      # FTD-2-106020
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Deny IP teardrop fragment'
            - fieldName: log.irrelevant
              pattern: '\((\s)?size(\s)?='
            - fieldName: from.bytesSent
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: ',(\s)?offset(\s)?='
            - fieldName: log.fragmentOffset
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '\)(\s)?from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: to.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106020
      # Adding actionResult
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Denied'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==106020
      #......................................................................#
      # FTD-6-611301
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'NAT configured for Client Mode with no split tunneling'
            - fieldName: log.irrelevant
              pattern: '{{.data}}ress\:'
            - fieldName: log.mappedIp
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611301
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'NAT'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611301
      #......................................................................#
      # FTD-6-611303
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'NAT configured for Client Mode with split tunneling'
            - fieldName: log.irrelevant
              pattern: '{{.data}}ress\:'
            - fieldName: log.mappedIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}works\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.netmaskFrom
              pattern: '{{.data}}\s'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.netmaskTo
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611303
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'NAT'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611303
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611303
      #......................................................................#
      # FTD-6-611304
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'NAT exemption configured for Network Extension Mode with split tunneling'
            - fieldName: log.irrelevant
              pattern: '{{.data}}works\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.netmaskFrom
              pattern: '{{.data}}\s'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: log.netmaskTo
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611304
      # Adding protocol
      - add:
          function: 'string'
          params:
            key: protocol
            value: 'NAT'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611304
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611304
      #......................................................................#
      # FTD-6-611307
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:(\s)?Head end\:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611307
      # Adding action and actionResult
      - add:
          function: 'string'
          params:
            key: action
            value: 'The VPN client is connected to the specified headend'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611307
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Success'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611307
      #......................................................................#
      # FTD-6-611309
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'Disconnecting from head end and uninstalling previously downloaded policy'
            - fieldName: log.irrelevant
              pattern: '{{.data}}End\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611309
      #......................................................................#
      # FTD-6-611310,611311
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'XAUTH'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '\:(\s)?Peer(\s)?\:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611310 || msgId==611311
      #......................................................................#
      # FTD-6-611314
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:(\s)?Load Balancing Cluster with Virtual IP\:(\s)?'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}server'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611314
      # Adding action
      - add:
          function: 'string'
          params:
            key: action
            value: 'Load Balancing Cluster redirected the Secure Firewall'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611314
      #......................................................................#
      # FTD-6-611315
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:(\s)?Disconnecting from Load Balancing Cluster member(\:)?(\s)?'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611315
      # Adding action
      - add:
          function: 'string'
          params:
            key: action
            value: 'Disconnecting from Load Balancing Cluster'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611315
      #......................................................................#
      # FTD-6-611318
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient\:'
            - fieldName: action
              pattern: 'User Authentication Enabled'
            - fieldName: log.irrelevant
              pattern: '{{.data}}IP(\s)?\:'
            - fieldName: log.authServerIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}Port(\s)?\:'
            - fieldName: log.authServerPort
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}out(\s)?\:'
            - fieldName: log.timeOut
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611318
      #......................................................................#
      # FTD-3-710003
      - grok:
          patterns:
            - fieldName: action
              pattern: '(TCP|UDP) access denied by ACL'
            - fieldName: log.irrelevant
              pattern: 'from'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: from.port
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: 'to'
            - fieldName: log.dstInterface
              pattern: '{{.data}}(\s)?:'
            - fieldName: to.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\s)?/'
            - fieldName: to.port
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==710003
      # Protocol and actionResult
      - grok:
          patterns:
            - fieldName: protocol
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.word}}'
            - fieldName: actionResult
              pattern: '{{.word}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==710003
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - from.ip
            - to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==710003
      - trim:
          function: suffix
          substring: ':'
          fields:
            - log.dstInterface
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==710003
      #......................................................................#
      # FTD-5-713252,713253
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?='
            - fieldName: from.group
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'Username(\s)?='
            - fieldName: from.user
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'IP(\s)?='
            - fieldName: from.ip
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.data}}available(\.)?'
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==713252 || msgId==713253
      # Cleaning fields
      - trim:
          function: suffix
          substring: ','
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==713252 || msgId==713253
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==713252 || msgId==713253
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==713252 || msgId==713253
      #......................................................................#
      # FTD-6-716001,716002,716003
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}User'
            - fieldName: from.user
              pattern: '{{.data}}IP'
            - fieldName: from.ip
              pattern: '(\<)?({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\>)?'
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      - trim:
          function: prefix
          substring: '<'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      - trim:
          function: suffix
          substring: '>'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716001 || msgId==716002 || msgId==716003
      #......................................................................#
      # FTD-6-716004,716005,716006,716007,716009
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}User'
            - fieldName: from.user
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      - trim:
          function: prefix
          substring: '<'
          fields:
            - from.group
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      - trim:
          function: suffix
          substring: '>'
          fields:
            - from.group
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716004 || msgId==716005 || msgId==716006 || msgId==716007 || msgId==716009
      #......................................................................#
      # FTD-6-716038
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Group(\s)?'
            - fieldName: from.group
              pattern: '{{.data}}User'
            - fieldName: from.user
              pattern: '{{.data}}IP'
            - fieldName: from.ip
              pattern: '(\<)?({{.ipv4}}|{{.ipv6}}|{{.hostname}})(\>)?'
            - fieldName: action
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      # Adding actionResult
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Success'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'User'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: suffix
          substring: 'IP'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: prefix
          substring: '<'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: suffix
          substring: '>'
          fields:
            - from.group
            - from.user
            - from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      - trim:
          function: suffix
          substring: ','
          fields:
            - action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716038
      #......................................................................#
      # FTD-6-716039
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: 'group(\s)?='
            - fieldName: from.group
              pattern: '{{.data}}user'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: from.user
              pattern: '{{.data}},'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716039
      # Adding actionResult
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Denied'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716039
      # Cleaning fields
      - trim:
          function: suffix
          substring: ','
          fields:
            - action
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716039
      - trim:
          function: suffix
          substring: 'user'
          fields:
            - from.group
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==716039
      #......................................................................#
      # FTD-6-719017,719019,719020,719021,719022,719023
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'WebVPN user(\:)?'
            - fieldName: from.user
              pattern: '{{.data}}\s'
            - fieldName: action
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719017 || (msgId>=719019 && msgId<=719023)
      # Adding actionResult and modifying some actions
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Failed'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719019
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Success'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719020 || msgId==719022
      - add:
          function: 'string'
          params:
            key: actionResult
            value: 'Denied'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719023
      - add:
          function: 'string'
          params:
            key: action
            value: 'WebVPN user is not checked against ACL'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719021
      - add:
          function: 'string'
          params:
            key: action
            value: 'WebVPN user has been authenticated'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719022
      - add:
          function: 'string'
          params:
            key: action
            value: 'WebVPN user has not been authenticated'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719023
      # Cleaning fields
      - trim:
          function: prefix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719017 || (msgId>=719019 && msgId<=719023)
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719017 || (msgId>=719019 && msgId<=719023)
      #......................................................................#
      # FTD-6-719018
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'WebVPN user(\:)?'
            - fieldName: from.user
              pattern: '{{.data}}\s'
            - fieldName: log.irrelevant
              pattern: 'ACL ID'
            - fieldName: log.accessList
              pattern: '{{.data}}not'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719018
      # Cleaning fields
      - trim:
          function: suffix
          substring: ''''
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719018
      - trim:
          function: suffix
          substring: 'not'
          fields:
            - log.accessList
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719018
      #......................................................................#
      # FTD-6-719024
      - grok:
          patterns:
            - fieldName: action
              pattern: 'Email Proxy piggyback auth fail'
            - fieldName: log.irrelevant
              pattern: '{{.data}}='
            - fieldName: log.sessionPointer
              pattern: '{{.data}}user'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: from.user
              pattern: '{{.data}}addr'
            - fieldName: log.irrelevant
              pattern: '='
            - fieldName: from.ip
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719024
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'user'
          fields:
            - log.sessionPointer
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719024
      - trim:
          function: suffix
          substring: 'addr'
          fields:
            - from.user
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==719024
      #......................................................................#
      # FTD-7-609002
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'Teardown local-host'
            - fieldName: log.zoneName
              pattern: '{{.data}}/'
            - fieldName: log.irrelevant
              pattern: '{{.data}}\:'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: 'duration'
            - fieldName: log.duration
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==609002
      # Cleaning fields
      - trim:
          function: suffix
          substring: '/'
          fields:
            - log.zoneName
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==609002
      #......................................................................#
      # FTD-6-611305
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: 'VPNClient(\s)?\:'
            - fieldName: action
              pattern: 'DHCP Policy installed'
            - fieldName: log.irrelevant
              pattern: '{{.data}}DNS(\s)?\:'
            - fieldName: log.primaryDns
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}DNS(\s)?\:'
            - fieldName: log.secondaryDns
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}WINS(\s)?\:'
            - fieldName: log.primaryWins
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.data}}WINS(\s)?\:'
            - fieldName: log.secondaryWins
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==611305
      #......................................................................#
      # FTD-4-733100
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.data}}exceeded'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.burstRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.maxBurstRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.avgRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.maxAvgRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.cumulativeTotalCount
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      # Cleaning cumulative total count
      - grok:
          patterns:
            - fieldName: log.cumulativeTotalCount
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.cumulativeTotalCount
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      # Parsing drop source object
      - grok:
          patterns:
            - fieldName: log.dropSourceObject
              pattern: '{{.data}}drop'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      # Cleaning fields
      - trim:
          function: suffix
          substring: 'drop'
          fields:
            - log.dropSourceObject
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      - trim:
          function: suffix
          substring: ']'
          fields:
            - log.dropSourceObject
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      - trim:
          function: prefix
          substring: '['
          fields:
            - log.dropSourceObject
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733100
      #......................................................................#
      # FTD-4-733101
      - grok:
          patterns:
            - fieldName: action
              pattern: '{{.data}}(targeted|attacking)'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.burstRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.maxBurstRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.avgRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.maxAvgRateValue
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.data}}is'
            - fieldName: log.cumulativeTotalCount
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733101
      # Cleaning cumulative total count
      - grok:
          patterns:
            - fieldName: log.cumulativeTotalCount
              pattern: '{{.integer}}'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.cumulativeTotalCount
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733101
      # Parsing drop source object
      - grok:
          patterns:
            - fieldName: log.dropSourceObject
              pattern: '{{.word}}'
            - fieldName: log.tmpIp
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: action
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733101
      # Renaming from or to ip, according to -> if (targeted|attacking)
      - rename:
          from:
            - log.tmpIp
          to: from.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
              - get: action
                as: act
                ofType: string
            expression: msgId==733101 && act.contains("attacking")
      - rename:
          from:
            - log.tmpIp
          to: to.ip
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
              - get: action
                as: act
                ofType: string
            expression: msgId==733101 && act.contains("targeted")
      #......................................................................#
      # FTD-4-733102, 733103
      - grok:
          patterns:
            - fieldName: log.irrelevant
              pattern: '{{.data}}host'
            - fieldName: from.ip
              pattern: '({{.ipv4}}|{{.ipv6}}|{{.hostname}})'
            - fieldName: log.irrelevant
              pattern: '{{.greedy}}'
          source: log.msg
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
            expression: msgId==733102 || msgId==733103
      # Adding action
      - add:
          function: 'string'
          params:
            key: action
            value: 'Threat-detection add host to shun list'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
              - get: log.msg
                as: msg
                ofType: string
            expression: (msgId==733102 || msgId==733103) && msg.contains("add")
      - add:
          function: 'string'
          params:
            key: action
            value: 'Threat-detection removes host to shun list'
          where:
            variables:
              - get: log.messageId
                as: msgId
                ofType: int
              - get: log.msg
                as: msg
                ofType: string
            expression: (msgId==733102 || msgId==733103) && msg.contains("removes")
      #......................................................................#
      # Decoding severity
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Alert'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="1"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Critical'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="2"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Error'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="3"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Warning'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="4"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Notification'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="5"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Informational'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="6"
      - add:
          function: 'string'
          params:
            key: log.severityLabel
            value: 'Debugging'
          where:
            variables:
              - get: log.severity
                as: sev
                ofType: string
            expression: sev=="7"
      #......................................................................#
      # Common field conversions
      - cast:
          fields:
            - from.port
            - to.port
          to: int
      # Removing unused fields
      - delete:
          fields:
            - log.firePowerHeader
            - log.ciscoSeparator
            - log.irrelevant
            - log.syslogPri
            - log.rest
