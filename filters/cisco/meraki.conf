filter {

   split {
      field => "message"
      terminator => "<utm-log-separator>"
   }

   #Looking for datasource generated by an agent and parse original message
   if [message]=~/\[utm_stack_agent_ds=(.+)\]-(.+)/ {
    grok {
      match => {
        "message" => [ "\[utm_stack_agent_ds=%{DATA:dataSource}\]-%{GREEDYDATA:original_log_message}" ]
      }
    }
   }
   if [original_log_message] {
    mutate {
      update => { "message" => "%{[original_log_message]}" }
    }
   }

#......................................................................#
# Cisco Meraki bassed on https://documentation.meraki.com/General_Administration/Monitoring_and_Reporting/Syslog_Event_Types_and_Log_Samples (january 2022)
# https://documentation.cysiv.com/articles/#!data-source-onboarding-device-configuration-reference/cisco-meraki-reference-information-and-cim-mapping
# Filter version 2.0.1

#First identify meraki messages   
   if [message] and ([message]=~/\b((ANB)_)?(MX|MR)(\d){2} (events|flows|urls|ids-alerts|security_event)\b/ 
   or [message]=~/\b(MS)(\d){3}_(\d){1,2}P (events|flows|urls|ids-alerts|security_event)\b/  
   or ("signature" in [message] and "priority" in [message] and "timestamp" in [message] 
   and "dhost" in [message] and "direction" in [message] and "protocol" in [message]
   and "src" in [message] and "dst" in [message]) 
   or ("url" in [message] and "src" in [message] and "dst" in [message] 
   and "mac" in [message] and "name" in [message] and "disposition" in [message]
   and "action" in [message]) 
   or ([message]=~/\b(?:[+-]?(?:[0-9]+))\.(?:[+-]?(?:[0-9]+))\slabs_appliance events Site-to-site VPN\b/) 
   or ([message]=~/\b(?:[+-]?(?:[0-9]+))\.(?:[+-]?(?:[0-9]+))\slabs_Z1 events Site-to-site VPN\b/) 
   or ("airmarshal_events" in [message] and "type" in [message] and "ssid" in [message] 
   and "bssid" in [message] and "src" in [message] and "dst" in [message]
   and (("wired_mac" in [message]) or ("vap" in [message] and "rssi" in [message])) ) 
   or [message]=~/\b(?:[+-]?(?:[0-9]+))\.(?:[+-]?(?:[0-9]+)) ((\w|-)+) (events|flows|urls|ids-alerts|security_event)\b/ ) {

#......................................................................#
#Using grok to parse priority if present
        grok {
          match => {
           "message" => [ "(<%{NUMBER:priority}>)?%{GREEDYDATA:meraki_msg_init}" ]
          }
        }
#......................................................................#
#Using grok to parse date and ip or host if present
      if [meraki_msg_init] {  
        grok {
          match => {
           "meraki_msg_init" => [
           "(%{CISCOTIMESTAMP:fecha})?(\s)?(%{IPORHOST:ciscoDataSource})?(\s)?(:)?(\s)?%{GREEDYDATA:meraki_message}"
           ]
          }
        }
      }
#......................................................................#
#Generating dataSource field required by CurrelationRulesEngine
#Checks if ciscoDataSource exists, if true, the dataSource field take its "valid" value, if not, take the agent dataSource value
 
 if ([ciscoDataSource]){
      if !([ciscoDataSource]=~/^((\d)+)$/) {
	    #For cases when ciscoDataSource is a number only, and not IPORHOST 
	    #because the log is like: <166>1 1380653443.857790533 FFF_MX events ...
	    #in the case above (1) match with IPORHOST pattern
        if [dataSource] {
          mutate {
            update => { "dataSource" => "%{[ciscoDataSource]}" }
          }
        } else {
          mutate {
            add_field => { "dataSource" => "%{ciscoDataSource}" }
          }
        }
      }
 }
#Finally evaluates to the host variable if can not be calculated
 if ![dataSource] {
    mutate {
       add_field => { "dataSource" => "%{host}" }
     }
 }

#......................................................................# 
#Generating dataType field required by CurrelationRulesEngine
    mutate {
     add_field => { "dataType" => "firewall-meraki" }
    }
#......................................................................# 
#Begin to parse messages
#......................................................................#
# generic event	parsing
	if [meraki_message] {
        grok {
 			match => {
 				"meraki_message" => [
				"(%{GREEDYDATA:irrelevant} %{IPORHOST:msg_src_ip} %{INT:msg_src_port}(\s))?%{DATA:msg_event_time} %{DATA:msg_mx_type} (?<msg_mx_group>((events|flows|urls|ids-alerts|security_event))) %{GREEDYDATA:generic_event}"
				]
 			}
 		}
	}
	if [generic_event] {
# event vpn connectivity change	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} vpn_type(\s)?=(\s)?'%{DATA:vpn_type}' peer_contact(\s)?=(\s)?'%{IPORHOST:src_ip}(\s)?:(\s)?%{INT:src_port}' peer_ident(\s)?=(\s)?'%{GREEDYDATA:peer_ident}' connectivity(\s)?=(\s)?'%{WORD:connectivity}'"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if [connectivity] and [connectivity] == "true" {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
#......................................................................#
# event uplink connectivity change	
    if "failover to" in [generic_event] {
		grok {
 			match => {
 				"generic_event" => [
				"%{GREEDYDATA:event_type}"
 				]
 			}
 		}	
	}else if [generic_event]=~/\bCellular connection (up|Up|down|Down)(\s)?(?:[+-]?(?:[0-9]+))\.(?:[+-]?(?:[0-9]+))\b/ {
		# Event: urls, HTTP GET requests in MR Access Points
		grok {
 			match => {
 				"generic_event" => [
				"Cellular connection (?<mx_conn_state>(up|Up|down|Down))(\s)?%{DATA:event_time} %{WORD:mx_type} (?<mx_group>((events|flows|urls|ids-alerts|security_event))) src(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?%{INT:src_port} dst(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?%{INT:dst_port} mac(\s)?=(\s)?%{GREEDYDATA:mac} request(\s)?:(\s)?%{WORD:method} %{GREEDYDATA:url}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if [mx_conn_state] and [mx_conn_state] =~/\b(up|Up)\b/ {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
	}else if [generic_event]=~/\bCellular connection (up|Up|down|Down)\b/ {
		grok {
 			match => {
 				"generic_event" => [
				"%{GREEDYDATA:event_type}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if [generic_event] =~/\b(up|Up)\b/ {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
	}
#......................................................................#
# Event: event, dhcp no offers
    if "dhcp no offers" in [generic_event] {	
        grok {
 			match => {
 				"generic_event" => [
				"%{DATA:event_type} for mac %{GREEDYDATA:mac} host(\s)?=(\s)?%{IPORHOST:src_ip}%{GREEDYDATA:irrelevant}?"
 				]
 			}
 		}
	}
#......................................................................#
# Event: event, dhcp lease
    if "dhcp lease" in [generic_event] {	
        grok {
 			match => {
 				"generic_event" => [
				"%{DATA:event_type} of ip %{IPORHOST:src_ip} from server mac %{GREEDYDATA:server_mac} for client mac %{GREEDYDATA:client_mac} from router %{IPORHOST:router_ip} on subnet %{IPORHOST:subnet} with dns %{IPORHOST:dns}(\s)?,(\s)?%{IPORHOST:dns}%{GREEDYDATA:irrelevant}?"
 				]
 			}
 		}
		#Add action field when connection seems to be established
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
#......................................................................#
# Event: event, HTTP GET requests in Meraki MX Security Appliance
    if [msg_mx_group] and ([msg_mx_group]=="urls" and [generic_event]=~/^(src)(.)+/ and "dst" in [generic_event] 
	and "mac" in [generic_event] and "request" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"src(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?%{INT:src_port} dst(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?%{INT:dst_port} mac(\s)?=(\s)?%{GREEDYDATA:client_mac} request(\s)?:(\s)?%{WORD:method} %{GREEDYDATA:url}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
	}
#......................................................................#
# Event: flows, IP session initiated in Meraki MX Security Appliance
    if [msg_mx_group] and ([msg_mx_group]=="flows" and [generic_event]=~/^(src)(.)+/ and "dport" in [generic_event] 
	and "protocol" in [generic_event] and "sport" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"src(\s)?=(\s)?%{IPORHOST:src_ip} dst(\s)?=(\s)?%{IPORHOST:dst_ip} mac(\s)?=(\s)?%{GREEDYDATA:mac} protocol(\s)?=(\s)?%{DATA:protocol} sport(\s)?=(\s)?%{INT:src_port} dport(\s)?=(\s)?%{INT:dst_port} pattern:%{GREEDYDATA:pattern}",
				"src(\s)?=(\s)?%{IPORHOST:src_ip} dst(\s)?=(\s)?%{IPORHOST:dst_ip} protocol(\s)?=(\s)?%{DATA:protocol} sport(\s)?=(\s)?%{INT:src_port} dport(\s)?=(\s)?%{INT:dst_port} pattern:%{GREEDYDATA:pattern}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if [pattern] and ([pattern] =~/^((\s)?(0|allow|Allow))/ ) {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
	}
#......................................................................#
# Event: ids-alerts, ids signature matched in Meraki MX Security Appliance
    if [msg_mx_group] and ([msg_mx_group]=="ids-alerts" and [generic_event]=~/^(signature)(.)+/ and "priority" in [generic_event] 
	and "timestamp" in [generic_event] and "direction" in [generic_event] and "protocol" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"signature(\s)?=(\s)?%{GREEDYDATA:signature} priority(\s)?=(\s)?%{INT:evt_priority} timestamp(\s)?=(\s)?%{GREEDYDATA:irrelevant} direction(\s)?=(\s)?%{WORD:direction} protocol(\s)?=(\s)?%{DATA:protocol} src(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?%{INT:src_port}(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
		#In this case even if the connection was established, the action wasnt created because this event is already detected by alerts 
	}
#......................................................................#
# Event: event IPsec-SA request queued due to no phase 1 found, phase2 negotiation failed, initiate new phase 1 negotiation, 
# ISAKMP-SA established, initiate new phase 2 negotiation, IPsec-SA established, ISAKMP-SA established, and ISAKMP-SA deleted 
# in Meraki MX Security Appliance
# This type of message mx_type=labs_appliance mx_group=events
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(Site)(.)+/ ) {	
        grok {
 			match => {
 				"generic_event" => [
				"Site-to-site VPN(\s)?:(\s)?%{GREEDYDATA:irrelevant} (deleted|established) %{IPORHOST:src_ip}(\s)?\[(\s)?%{INT:src_port}(\s)?\](\s)?-(\s)?%{IPORHOST:dst_ip}(\s)?\[(\s)?%{INT:dst_port}(\s)?\] spi(\s)?:(\s)?%{GREEDYDATA:spi}",
				"Site-to-site VPN(\s)?:(\s)?%{GREEDYDATA:irrelevant} request for %{IPORHOST:src_ip} queued due to no %{GREEDYDATA:irrelevant} found",
				"Site-to-site VPN(\s)?:(\s)?%{GREEDYDATA:irrelevant} negotiation failed due to time up waiting for %{GREEDYDATA:irrelevant}.(\s)?ESP %{IPORHOST:src_ip}(\s)?\[(\s)?%{INT:src_port}(\s)?\](\s)?->(\s)?%{IPORHOST:dst_ip}(\s)?\[(\s)?%{INT:dst_port}(\s)?\](%{GREEDYDATA:irrelevant})?",
				"Site-to-site VPN(\s)?:(\s)?%{GREEDYDATA:irrelevant} negotiation(\s)?:(\s)?%{IPORHOST:src_ip}(\s)?\[(\s)?%{INT:src_port}(\s)?\](\s)?<=>(\s)?%{IPORHOST:dst_ip}(\s)?\[(\s)?%{INT:dst_port}(\s)?\](%{GREEDYDATA:irrelevant})?",
				"Site-to-site VPN(\s)?:(\s)?%{GREEDYDATA:irrelevant} established:(\s)?ESP/Tunnel %{IPORHOST:src_ip}(\s)?\[(\s)?%{INT:src_port}(\s)?\](\s)?->(\s)?%{IPORHOST:dst_ip}(\s)?\[(\s)?%{INT:dst_port}(\s)?\] spi(\s)?=(\s)?%{GREEDYDATA:spi}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if "queued due to no phase 1" in [generic_event] or "queued due to no phase1" in [generic_event] or "Site-to-site VPN: failed" in [generic_event] {
			#No action
		} else {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
	}
#......................................................................#
# Event: event spanning-tree guard state change in Meraki MS Switches 
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(Port)(.)+/ ) {	
        grok {
 			match => {
 				"generic_event" => [
				"Port %{INT:src_port} received an %{DATA:protocol} BPDU from %{GREEDYDATA:mac} so the port was %{GREEDYDATA:mx_action}"
 				]
 			}
 		}
	}
#......................................................................#
# Event: event blocked DHCP server response in Meraki MS Switches 
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(Blocked)(.)+/ ) {	
        grok {
 			match => {
 				"generic_event" => [
				"Blocked %{DATA:protocol} server response from %{GREEDYDATA:mac} on VLAN %{GREEDYDATA:vlan}"
 				]
 			}
 		}
	}
#......................................................................#
# Event: event 802.1X (all events) in Meraki MS Switches 
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(type)(.)+/ and "port" in [generic_event] and "identity" in [generic_event] ){	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} port(\s)?=(\s)?(''|'%{INT:src_port}') identity(\s)?=(\s)?'%{GREEDYDATA:identity}'(%{GREEDYDATA:irrelevant})?"
 				]
 			}
 		}
		#In this case even if the connection was established, the action wasnt created because dont have any ip address
	}
#......................................................................#
# Event: event 802.11 disassociation in Meraki MR Access Points
    if [msg_mx_group] and ( [msg_mx_group]=="events" and [generic_event]=~/^(type)(.)+/ and "radio" in [generic_event] and "channel" in [generic_event] 
	and "auth_neg_dur" in [generic_event] and "last_auth_ago" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} radio(\s)?=(\s)?'%{INT:radio}' vap(\s)?=(\s)?'%{INT:vap}' channel(\s)?=(\s)?'%{INT:channel}' reason(\s)?=(\s)?'%{GREEDYDATA:reason}' instigator(\s)?=(\s)?'%{GREEDYDATA:instigator}' duration(\s)?=(\s)?'%{GREEDYDATA:duration}' auth_neg_dur(\s)?=(\s)?'%{GREEDYDATA:auth_neg_dur}' last_auth_ago(\s)?=(\s)?'%{GREEDYDATA:last_auth_ago}' is_wpa(\s)?=(\s)?'%{GREEDYDATA:is_wpa}' full_conn(\s)?=(\s)?'%{GREEDYDATA:full_conn}' ip_resp(\s)?=(\s)?'%{GREEDYDATA:ip_resp}' ip_src(\s)?=(\s)?'%{GREEDYDATA:src_ip}' arp_resp(\s)?=(\s)?'%{GREEDYDATA:arp_resp}' arp_src(\s)?=(\s)?'%{GREEDYDATA:arp_src}' dns_server(\s)?=(\s)?'%{GREEDYDATA:dns}' dns_req_rtt(\s)?=(\s)?'%{GREEDYDATA:dns_req_rtt}' dns_resp(\s)?=(\s)?'%{GREEDYDATA:dns_resp}' aid(\s)?=(\s)?'%{GREEDYDATA:aid}'"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		mutate {
			add_field => { "[logx][utm][action]" => "Success" }
		}
	}
#......................................................................#
# Event: event 802.1X (all events) in Meraki MR Access Points 
    if [msg_mx_group] and ( [msg_mx_group]=="events" and [generic_event]=~/^(type)(.)+/ and "radio" in [generic_event] and "vap" in [generic_event] 
	and "identity" in [generic_event] and "aid" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} radio(\s)?=(\s)?'%{INT:radio}' vap(\s)?=(\s)?'%{INT:vap}' identity(\s)?=(\s)?'%{GREEDYDATA:identity}' aid(\s)?=(\s)?'%{GREEDYDATA:aid}'"
 				]
 			}
 		}
		#In this case even if the connection was established, the action wasnt created because dont have any ip address
	}
#......................................................................#
# Event: event splash authentication in Meraki MR Access Points 
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(type)(.)+/ and "ip" in [generic_event] and "vap" in [generic_event] 
	and "duration" in [generic_event] and "download" in [generic_event] and "upload" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} ip(\s)?=(\s)?'%{GREEDYDATA:src_ip}' duration(\s)?=(\s)?'%{GREEDYDATA:duration}' vap(\s)?=(\s)?'%{GREEDYDATA:vap}' download(\s)?=(\s)?'%{GREEDYDATA:download}' upload(\s)?=(\s)?'%{GREEDYDATA:upload}'"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		mutate {
			add_field => { "[logx][utm][action]" => "Success" }
		}
	}
#......................................................................#
# Event: event wireless packet flood detected in Meraki MR Access Points 
    if [msg_mx_group] and ([msg_mx_group]=="events" and [generic_event]=~/^(type)(.)+/ and "packet" in [generic_event] and "device" in [generic_event] 
	and "state" in [generic_event] and "alarm_id" in [generic_event] and "dos_count" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"type(\s)?=(\s)?%{DATA:event_type} packet(\s)?=(\s)?'%{GREEDYDATA:packet}' device(\s)?=(\s)?'%{GREEDYDATA:device}' radio(\s)?=(\s)?'%{INT:radio}' state(\s)?=(\s)?'%{GREEDYDATA:state}' alarm_id(\s)?=(\s)?'%{GREEDYDATA:alarm_id}' dos_count(\s)?=(\s)?'%{GREEDYDATA:dos_count}' inter_arrival(\s)?=(\s)?'%{GREEDYDATA:inter_arrival}'"
 				]
 			}
 		}
	}
#......................................................................#
# Event: flows, flow allowed by Layer 3 firewall in Meraki MR Access Points 
    if [msg_mx_group] and ([msg_mx_group]=="flows" and [generic_event]=~/^(deny|allow)(.)+/ and "src" in [generic_event] and "dst" in [generic_event] 
	and "mac" in [generic_event] and "sport" in [generic_event] and "dport" in [generic_event] ) {	
        grok {
 			match => {
 				"generic_event" => [
				"%{WORD:mx_action} src(\s)?=(\s)?%{IPORHOST:src_ip} dst(\s)?=(\s)?%{IPORHOST:dst_ip} mac(\s)?=(\s)?%{GREEDYDATA:mac} protocol(\s)?=(\s)?%{DATA:protocol} sport(\s)?=(\s)?%{INT:src_port} dport(\s)?=(\s)?%{INT:dst_port}"
 				]
 			}
 		}
		#Add action field when connection seems to be established
		if [mx_action] and [mx_action] =~/\b(allow)\b/ {
			mutate {
				add_field => { "[logx][utm][action]" => "Success" }
			}
		}
	}
  }
#......................................................................#
# Event: event rogue SSID detected and SSID spoofing detected in Meraki MR Access Points
# This type of message dont have the header INT.INT mx_type mx_group, so we search for fields
    if (![generic_event] and [meraki_message]) and [meraki_message]=~/^(airmarshal_events)(.)+/ and ("type" in [meraki_message] and "ssid" in [meraki_message] 
	and "bssid" in [meraki_message] and "src" in [meraki_message] and "dst" in [meraki_message] 
	and (("wired_mac" in [meraki_message]) or ("vap" in [meraki_message] and "rssi" in [meraki_message])) ) {	
        grok {
 			match => {
 				"meraki_message" => [
				"airmarshal_events type(\s)?=(\s)?%{DATA:event_type} ssid(\s)?=(\s)?'(%{DATA:ssid})?' bssid(\s)?=(\s)?'(%{GREEDYDATA:bssid})?' src(\s)?=(\s)?'(%{GREEDYDATA:src_mac})?' dst(\s)?=(\s)?'(%{GREEDYDATA:dst_mac})?' wired_mac(\s)?=(\s)?'(%{GREEDYDATA:wired_mac})?' vlan_id(\s)?=(\s)?'(%{INT:vlan_id})?' channel(\s)?=(\s)?'(%{INT:channel})?' rssi(\s)?=(\s)?'(%{INT:rssi})?' fc_type(\s)?=(\s)?'(%{INT:fc_type})?' fc_subtype(\s)?=(\s)?'(%{INT:fc_subtype})?'",
				"airmarshal_events type(\s)?=(\s)?%{DATA:event_type} ssid(\s)?=(\s)?'(%{DATA:ssid})?' vap(\s)?=(\s)?'(%{INT:vap})?' bssid(\s)?=(\s)?'(%{GREEDYDATA:bssid})?' src(\s)?=(\s)?'(%{GREEDYDATA:src_mac})?' dst(\s)?=(\s)?'(%{GREEDYDATA:dst_mac})?' channel(\s)?=(\s)?'(%{INT:channel})?' rssi(\s)?=(\s)?'(%{INT:rssi})?' fc_type(\s)?=(\s)?'(%{INT:fc_type})?' fc_subtype(\s)?=(\s)?'(%{INT:fc_subtype})?'"
 				]
 			}
 		}
		#In this case even if the connection was established, the action wasnt created because this event is already detected by alerts
	}
#......................................................................#
# Event: security_event ids_alerted, ids signature matched in Meraki MX Security Appliance
# This type of message dont have the header INT.INT mx_type mx_group, so we search for fields
    if (![generic_event] and [meraki_message]) and ("signature" in [meraki_message] and "priority" in [meraki_message] and "timestamp" in [meraki_message] 
    and "dhost" in [meraki_message] and "direction" in [meraki_message] and "protocol" in [meraki_message]
    and "src" in [meraki_message] and "dst" in [meraki_message]) {	
        grok {
 			match => {
 				"meraki_message" => [
				"signature(\s)?=(\s)?%{GREEDYDATA:signature} priority(\s)?=(\s)?%{INT:evt_priority} timestamp(\s)?=(\s)?%{DATA:event_time} dhost(\s)?=(\s)?%{GREEDYDATA:mac} direction(\s)?=(\s)?%{WORD:direction} protocol(\s)?=(\s)?%{DATA:protocol} src(\s)?=(\s)?%{IPORHOST:src_ip}(\s)?:(\s)?%{INT:src_port} dst(\s)?=(\s)?%{IPORHOST:dst_ip}(\s)?:(\s)?%{INT:dst_port} message:%{GREEDYDATA:irrelevant}"
 				]
 			}
 		}
		#In this case even if the connection was established, the action wasnt created because this event is already detected by alerts 
	}

#Formatting number values
   mutate {
      convert => {
            "src_port" => "integer"
            "dst_port" => "integer"
            "evt_priority" => "integer"
            "priority" => "integer"
            "radio" => "integer"
            "vap" => "integer"
            "channel" => "integer"
			"rssi" => "integer"
			"vlan_id" => "integer"
			"fc_type" => "integer"
			"fc_subtype" => "integer"
        }
   }
#......................................................................#
#First search if some fields are already in the generic message, if not we try to capture from the header of the entire message
#Remember, the header is (something like part of a date) msg_src_ip msg_src_port event_time mx_type mx_group in meraki_message field
#Then add all possible fields to the json tree structure
   if ![src_ip] and [msg_src_ip] {
        mutate { add_field => { "src_ip" => "%{[msg_src_ip]}" }}
		if ![src_port] and [msg_src_port] {
            mutate { add_field => { "src_port" => "%{[msg_src_port]}" }}	
        }
   }
   if ![event_time] and [msg_event_time] {
        mutate { add_field => { "event_time" => "%{[msg_event_time]}" }}	
   }
   if ![mx_type] and [msg_mx_type] {
        mutate { add_field => { "mx_type" => "%{[msg_mx_type]}" }}	
   }
   if ![mx_group] and [msg_mx_group] {
        mutate { add_field => { "mx_group" => "%{[msg_mx_group]}" }}	
   }

   mutate { 
      rename => { "message" => "[logx][meraki][message]" }
      rename => { "event_time" => "[logx][meraki][event_time]" }
      rename => { "priority" => "[logx][meraki][priority]" }
      rename => { "event_parse_id" => "[logx][meraki][event_parse_id]" }
      rename => { "mx_group" => "[logx][meraki][mx_group]" }
      rename => { "mx_type" => "[logx][meraki][mx_type]" }

      #New fields from event vpn connectivity change
      rename => { "event_type" => "[logx][meraki][event_type]" }
      rename => { "vpn_type" => "[logx][meraki][vpn_type]" }
      rename => { "src_ip" => "[logx][meraki][src_ip]" }
      rename => { "src_port" => "[logx][meraki][src_port]" }
      rename => { "peer_ident" => "[logx][meraki][peer_ident]" }
      rename => { "connectivity" => "[logx][meraki][connectivity]" }
	  rename => { "mx_conn_state" => "[logx][meraki][mx_conn_state]" }
	  
      #New fields from dhcp events
      rename => { "mac" => "[logx][meraki][mac]" }
      rename => { "server_mac" => "[logx][meraki][server_mac]" }
      rename => { "client_mac" => "[logx][meraki][client_mac]" }
      rename => { "router_ip" => "[logx][meraki][router_ip]" }
      rename => { "subnet" => "[logx][meraki][subnet]" }
      rename => { "dns" => "[logx][meraki][dns]" }

      #New fields from event HTTP GET requests in Meraki MX Security Appliance
      rename => { "dst_ip" => "[logx][meraki][dest_ip]" }
      rename => { "dst_port" => "[logx][meraki][dest_port]" }
      rename => { "method" => "[logx][meraki][method]" }
      rename => { "url" => "[logx][meraki][url]" }

      #New fields from flows, IP session initiated
      rename => { "protocol" => "[logx][meraki][proto]" }
	  rename => { "pattern" => "[logx][meraki][pattern]" }

      #New fields from ids-alerts, ids signature matched
      rename => { "signature" => "[logx][meraki][signature]" }
      rename => { "evt_priority" => "[logx][meraki][evt_priority]" }
      rename => { "direction" => "[logx][meraki][direction]" }

      #New fields from events, IPsec-SA and ISAKMP-SA
      rename => { "spi" => "[logx][meraki][spi]" }

      #New fields from events spanning-tree guard state change in Meraki MS Switches
      rename => { "mx_action" => "[logx][meraki][mx_action]" }

      #New fields from events blocked DHCP server response in Meraki MS Switches
      rename => { "vlan" => "[logx][meraki][vlan]" }

      #New fields from events 802.1X (all events) in Meraki MS Switches
      rename => { "identity" => "[logx][meraki][identity]" }

      #New fields from events 802.11 disassociation in Meraki MR Access Points
      rename => { "radio" => "[logx][meraki][radio]" }
      rename => { "vap" => "[logx][meraki][vap]" }
      rename => { "channel" => "[logx][meraki][channel]" }
      rename => { "instigator" => "[logx][meraki][instigator]" }
      rename => { "auth_neg_dur" => "[logx][meraki][auth_neg_dur]" }
      rename => { "last_auth_ago" => "[logx][meraki][last_auth_ago]" }
      rename => { "is_wpa" => "[logx][meraki][is_wpa]" }
      rename => { "full_conn" => "[logx][meraki][full_conn]" }
      rename => { "ip_resp" => "[logx][meraki][ip_resp]" }
      rename => { "arp_resp" => "[logx][meraki][arp_resp]" }
      rename => { "arp_src" => "[logx][meraki][arp_src]" }
      rename => { "dns_req_rtt" => "[logx][meraki][dns_req_rtt]" }
      rename => { "dns_resp" => "[logx][meraki][dns_resp]" }
      rename => { "aid" => "[logx][meraki][aid]" }
      rename => { "reason" => "[logx][meraki][reason]" }
      rename => { "duration" => "[logx][meraki][duration]" }

      #New fields from events splash authentication in Meraki MR Access Points
      rename => { "download" => "[logx][meraki][download]" }
      rename => { "upload" => "[logx][meraki][upload]" }

      #New fields from event wireless packet flood detected in Meraki MR Access Points
      rename => { "packet" => "[logx][meraki][packet]" }
      rename => { "device" => "[logx][meraki][device]" }
      rename => { "state" => "[logx][meraki][state]" }
      rename => { "alarm_id" => "[logx][meraki][alarm_id]" }
      rename => { "dos_count" => "[logx][meraki][dos_count]" }
      rename => { "inter_arrival" => "[logx][meraki][inter_arrival]" }

      #New fields from event rogue SSID detected and SSID spoofing detected in Meraki MR Access Points
      rename => { "ssid" => "[logx][meraki][ssid]" }
      rename => { "bssid" => "[logx][meraki][bssid]" }
      rename => { "src_mac" => "[logx][meraki][src_mac]" }
      rename => { "dst_mac" => "[logx][meraki][dst_mac]" }
      rename => { "rssi" => "[logx][meraki][rssi]" }
      rename => { "fc_type" => "[logx][meraki][fc_type]" }
      rename => { "fc_subtype" => "[logx][meraki][fc_subtype]" }
      rename => { "vlan_id" => "[logx][meraki][vlan_id]" }
      rename => { "wired_mac" => "[logx][meraki][wired_mac]" }
   }
   
   #Finally, remove unnecessary fields
   mutate {
      remove_field => ["@version","fecha","path","meraki_msg_init","irrelevant","tags","msg_src_ip","msg_src_port",
	  "msg_event_time","msg_mx_type","msg_mx_group","generic_event","meraki_message","ciscoDataSource"]
   }		
   }
   #Also, remove unwanted fields if the message not match with conditions
   mutate {
      remove_field => ["original_log_message","headers"]
   }
}
