filter {
    if [path] and [path] == "/var/ossec/logs/alerts/alerts.json" {
#......................................................................#
# Filter version 1.0.7
# Checking agent.id, when value == 000, dataSource is always hids
        if ([agent][id] and [agent][id] == "000") {
            mutate {
            add_field => {
                "dataSource" => "hids"
            }
        }
        } else {
        # Make a copy of agent.name
        mutate {
               add_field => { "original_agent" => "%{[agent][name]}" }
            }
        mutate {
            rename => ["[agent][name]" , "[dataSrc]"]
        }
        # Check if [agent][name] renamed to [dataSrc] exists 
        if ([dataSrc]) {
            # Then check computer common naming conventions: https://learn.microsoft.com/en-us/troubleshoot/windows-server/identity/naming-conventions-for-computer-domain-site-ou
            if([dataSrc] =~ /^(\w)(\w|\.|-)+$/) and !([dataSrc] =~ /^(\d)(\d|\.)+(\d)$/) {
               mutate {
                 rename => ["[dataSrc]" , "[dataSource]"]
               }
            } else {
               # If [dataSrc] not match, means that [agent][name] have wrong values so reset to default field name
               mutate {
                 rename => ["[dataSrc]" , "[agent][name]"]
               } 
            } 
        }
        }
        # If could be parsed, there are no errors so, do the rest
        # If errors detected in [agent][name], [dataSource] is not in the flow so, do nothing
        if ([dataSource]) {
        mutate {
            add_field => {
                "dataType" => "hids"
            }
            rename => ["[agent][id]" , "[logx][hids][agent_id]"]
            rename => ["[agent][ip]" , "[logx][hids][agent_ip]"]
            rename => ["[manager][name]" , "[logx][hids][manager]"]
        }
        # Adding agent.name
        if[agent][name]{
            mutate { rename => ["[agent][name]" , "[logx][hids][agent_name]"] }
        } else {
            mutate { rename => ["[original_agent]" , "[logx][hids][agent_name]"] }
        }
        if [data] {
            mutate {
                rename => ["[data]", "[logx][hids][data]"]
            }
        }
        if [decoder] and [decoder][name] {
            mutate {
                rename => ["[decoder][name]", "[logx][hids][decoder_name]"]
            }
            # Separating remove from rename mutations
            mutate {
                remove_field => ["decoder"]
            }
        }
        if [location] {
            mutate {
                rename => ["[location]", "[logx][hids][location]"]
            }
        }
        if [rule] {
            mutate {
                rename => ["[rule]", "[logx][hids][rule]"]
            }
          if [logx][hids][rule][level] {
            if [logx][hids][rule][level] > 11 {
                mutate {
                    add_field => {
                        "[logx][hids][severity]" => 3
                    }
                    add_field => {
                        "[logx][hids][severity_label]" => "High"
                    }
                    add_field => {
                        "[logx][hids][category]" => "Potentially Compromised System"
                    }
                }
            }
            if [logx][hids][rule][level] <= 11 and [logx][hids][rule][level] >= 7 {
                mutate {
                    add_field => {
                        "[logx][hids][severity]" => 2
                    }
                    add_field => {
                        "[logx][hids][severity_label]" => "Medium"
                    }
                    add_field => {
                        "[logx][hids][category]" => "Potentially Malicious Activity"
                    }
                }
            }
            if [logx][hids][rule][level] < 7 {
                mutate {
                    add_field => {
                        "[logx][hids][severity]" => 1
                    }
                    add_field => {
                        "[logx][hids][severity_label]" => "Low"
                    }
                    add_field => {
                        "[logx][hids][category]" => "Low Risk or Informational Event"
                    }
                }
            }
          }
      }

#......................................................................#
# Checking again agent.id, when value == 000, dataSource is always hids
        if ([logx][hids][agent_id] and [logx][hids][agent_id] == "000") {
            ruby { code => 'event.set("dataSource", "hids")' }
        }
#......................................................................#
# Adding field for filter execution verification 
        mutate {
            add_field => {
                "[logx][hids][filter_version]" => "1.0.7"
            }
        }
#......................................................................#
# Remove unwanted fields
        mutate {
           remove_field => ["host", "type", "timestamp", "manager", "path", "agent"]
        }
      }

#......................................................................#
# If "_jsonparsefailure" in tags, was errors in the incoming json file, so, remove the entire message
      if "_jsonparsefailure" in [tags] and ![dataSource]{
        drop {}
      }
    }
}
